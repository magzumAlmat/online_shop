{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Downloads\\\\marioplan-master\\\\marioplan-master\\\\src\\\\components\\\\dashboard\\\\Dashboard.js\";\nimport React, { Component } from 'react';\nimport Notifications from './Notifications';\nimport ProjectList from '../projects/ProjectList';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { Redirect } from 'react-router-dom';\nimport ProjectListWithoutAuth from '../projects/ProjectListWithoutAuth';\n\nclass Dashboard extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextProps.q !== this.props.q) {\n      return true;\n    } else if (this.props.projects) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  componentWillUpdate() {\n    this.props.projects.filter(el => {\n      el.title.includes(this.props.q);\n    });\n  }\n\n  render() {\n    //console.log(this.props);\n    const _this$props = this.props,\n          projects = _this$props.projects,\n          auth = _this$props.auth,\n          notifications = _this$props.notifications,\n          q = _this$props.q;\n    let filteredProjects = projects;\n    if (!auth.uid) return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(ProjectListWithoutAuth, {\n      projects: this.props.project,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      className: \"dashboard container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col s12 m6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(ProjectList, {\n      projects: this.props.projects,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"col s12 m5 offset-m1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(Notifications, {\n      notifications: notifications,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nconst getSearchedProjects = (projects, q) => {\n  if (q) {\n    return projects.filter(p => p.title.toLowerCase().startsWith(q.toLowerCase()));\n  } else {\n    return projects;\n  }\n};\n\nconst mapStateToProps = state => {\n  return {\n    projects: getSearchedProjects(state.firestore.ordered.projects, state.search.q),\n    auth: state.firebase.auth,\n    notifications: state.firestore.ordered.notifications\n  };\n};\n\nexport default compose(connect(mapStateToProps), firestoreConnect([{\n  collection: 'projects',\n  orderBy: ['createdAt', 'desc']\n}, {\n  collection: 'notifications',\n  limit: 3,\n  orderBy: ['time', 'desc']\n}]))(Dashboard);","map":{"version":3,"sources":["C:\\Users\\user\\Downloads\\marioplan-master\\marioplan-master\\src\\components\\dashboard\\Dashboard.js"],"names":["React","Component","Notifications","ProjectList","connect","compose","firestoreConnect","Redirect","ProjectListWithoutAuth","Dashboard","shouldComponentUpdate","nextProps","nextState","q","props","projects","componentWillUpdate","filter","el","title","includes","render","auth","notifications","filteredProjects","uid","project","getSearchedProjects","p","toLowerCase","startsWith","mapStateToProps","state","firestore","ordered","search","firebase","collection","orderBy","limit"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Notifications from './Notifications';\nimport ProjectList from '../projects/ProjectList';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { Redirect } from 'react-router-dom';\nimport ProjectListWithoutAuth from '../projects/ProjectListWithoutAuth';\n\nclass Dashboard extends Component {\n\n    shouldComponentUpdate(nextProps, nextState){\n        if(nextProps.q !== this.props.q){\n            return true;\n        }\n        else if(this.props.projects){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n\n    componentWillUpdate(){\n        this.props.projects.filter(el =>{\n            el.title.includes(this.props.q)\n        })\n    }\n\n    render() { \n        //console.log(this.props);\n        const { projects, auth, notifications, q } = this.props;\n\n        let filteredProjects = projects;\n        \n        if(!auth.uid) return (<div>\n            <ProjectListWithoutAuth projects={this.props.project}/>\n        </div>)\n        return (\n            <div className=\"dashboard container\">\n                <div className=\"row\">\n                    <div className=\"col s12 m6\">\n                        <ProjectList projects={this.props.projects} />\n                    </div>\n                    <div className=\"col s12 m5 offset-m1\">\n                        <Notifications notifications={notifications}/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst getSearchedProjects = (projects, q) => {\n    if(q){\n        return projects.filter(p => p.title.toLowerCase().startsWith(q.toLowerCase()));\n    }\n    else{\n        return projects\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        projects: getSearchedProjects(state.firestore.ordered.projects, state.search.q),\n        auth: state.firebase.auth,\n        notifications: state.firestore.ordered.notifications,\n    }\n};\n \nexport default compose(\n    connect(mapStateToProps),\n    firestoreConnect([\n        { collection: 'projects', orderBy:['createdAt', 'desc']},\n        { collection: 'notifications', limit: 3, orderBy:['time', 'desc']}\n    ])\n)(Dashboard);"]},"metadata":{},"sourceType":"module"}