{"ast":null,"code":"import { MixedType } from './MixedType';\nexport class DateType extends MixedType {\n  constructor(errorMessage) {\n    super('date');\n    super.pushRule({\n      onValid: value => !/Invalid|NaN/.test(new Date(value).toString()),\n      errorMessage: errorMessage || this.locale.type\n    });\n  }\n\n  range(min, max) {\n    let errorMessage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.locale.range;\n    super.pushRule({\n      onValid: value => new Date(value) >= new Date(min) && new Date(value) <= new Date(max),\n      errorMessage,\n      params: {\n        min,\n        max\n      }\n    });\n    return this;\n  }\n\n  min(min) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.min;\n    super.pushRule({\n      onValid: value => new Date(value) >= new Date(min),\n      errorMessage,\n      params: {\n        min\n      }\n    });\n    return this;\n  }\n\n  max(max) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.max;\n    super.pushRule({\n      onValid: value => new Date(value) <= new Date(max),\n      errorMessage,\n      params: {\n        max\n      }\n    });\n    return this;\n  }\n\n}\nexport default function getDateType(errorMessage) {\n  return new DateType(errorMessage);\n}","map":{"version":3,"sources":["../src/DateType.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,QAA0B,aAA1B;AAIA,OAAM,MAAO,QAAP,SAA8D,SAA9D,CAKL;EACC,WAAA,CAAY,YAAZ,EAAqC;IACnC,MAAM,MAAN;IACA,MAAM,QAAN,CAAe;MACb,OAAO,EAAE,KAAK,IAAI,CAAC,cAAc,IAAd,CAAmB,IAAI,IAAJ,CAAS,KAAT,EAAgB,QAAhB,EAAnB,CADN;MAEb,YAAY,EAAE,YAAY,IAAI,KAAK,MAAL,CAAY;IAF7B,CAAf;EAID;;EAED,KAAK,CAAC,GAAD,EAAqB,GAArB,EAAqF;IAAA,IAA5C,YAA4C,uEAAjB,KAAK,MAAL,CAAY,KAAK;IACxF,MAAM,QAAN,CAAe;MACb,OAAO,EAAE,KAAK,IAAI,IAAI,IAAJ,CAAS,KAAT,KAAmB,IAAI,IAAJ,CAAS,GAAT,CAAnB,IAAoC,IAAI,IAAJ,CAAS,KAAT,KAAmB,IAAI,IAAJ,CAAS,GAAT,CAD5D;MAEb,YAFa;MAGb,MAAM,EAAE;QAAE,GAAF;QAAO;MAAP;IAHK,CAAf;IAKA,OAAO,IAAP;EACD;;EAED,GAAG,CAAC,GAAD,EAA+D;IAAA,IAA1C,YAA0C,uEAAf,KAAK,MAAL,CAAY,GAAG;IAChE,MAAM,QAAN,CAAe;MACb,OAAO,EAAE,KAAK,IAAI,IAAI,IAAJ,CAAS,KAAT,KAAmB,IAAI,IAAJ,CAAS,GAAT,CADxB;MAEb,YAFa;MAGb,MAAM,EAAE;QAAE;MAAF;IAHK,CAAf;IAKA,OAAO,IAAP;EACD;;EAED,GAAG,CAAC,GAAD,EAA+D;IAAA,IAA1C,YAA0C,uEAAf,KAAK,MAAL,CAAY,GAAG;IAChE,MAAM,QAAN,CAAe;MACb,OAAO,EAAE,KAAK,IAAI,IAAI,IAAJ,CAAS,KAAT,KAAmB,IAAI,IAAJ,CAAS,GAAT,CADxB;MAEb,YAFa;MAGb,MAAM,EAAE;QAAE;MAAF;IAHK,CAAf;IAKA,OAAO,IAAP;EACD;;AAlCF;AAqCD,eAAc,SAAU,WAAV,CAAkD,YAAlD,EAAkE;EAC9E,OAAO,IAAI,QAAJ,CAA0B,YAA1B,CAAP;AACD","sourceRoot":"","sourcesContent":["import { MixedType } from './MixedType';\nexport class DateType extends MixedType {\n    constructor(errorMessage) {\n        super('date');\n        super.pushRule({\n            onValid: value => !/Invalid|NaN/.test(new Date(value).toString()),\n            errorMessage: errorMessage || this.locale.type\n        });\n    }\n    range(min, max, errorMessage = this.locale.range) {\n        super.pushRule({\n            onValid: value => new Date(value) >= new Date(min) && new Date(value) <= new Date(max),\n            errorMessage,\n            params: { min, max }\n        });\n        return this;\n    }\n    min(min, errorMessage = this.locale.min) {\n        super.pushRule({\n            onValid: value => new Date(value) >= new Date(min),\n            errorMessage,\n            params: { min }\n        });\n        return this;\n    }\n    max(max, errorMessage = this.locale.max) {\n        super.pushRule({\n            onValid: value => new Date(value) <= new Date(max),\n            errorMessage,\n            params: { max }\n        });\n        return this;\n    }\n}\nexport default function getDateType(errorMessage) {\n    return new DateType(errorMessage);\n}\n//# sourceMappingURL=DateType.js.map"]},"metadata":{},"sourceType":"module"}