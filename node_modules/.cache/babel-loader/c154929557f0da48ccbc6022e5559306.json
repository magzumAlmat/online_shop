{"ast":null,"code":"import formatErrorMessage from './formatErrorMessage';\n/**\n * Create a data asynchronous validator\n * @param data\n */\n\nexport function createValidatorAsync(data, name) {\n  function check(errorMessage) {\n    return checkResult => {\n      if (checkResult === false) {\n        return {\n          hasError: true,\n          errorMessage\n        };\n      } else if (typeof checkResult === 'object' && (checkResult.hasError || checkResult.array)) {\n        return checkResult;\n      }\n\n      return null;\n    };\n  }\n\n  return (value, rules) => {\n    const promises = rules.map(rule => {\n      const {\n        onValid,\n        errorMessage,\n        params\n      } = rule;\n      return Promise.resolve(onValid(value, data, name)).then(check(formatErrorMessage(errorMessage, { ...params,\n        name: Array.isArray(name) ? name.join('.') : name\n      })));\n    });\n    return Promise.all(promises).then(results => results.find(item => item && (item === null || item === void 0 ? void 0 : item.hasError)));\n  };\n}\nexport default createValidatorAsync;","map":{"version":3,"sources":["../../src/utils/createValidatorAsync.ts"],"names":[],"mappings":"AACA,OAAO,kBAAP,MAA+B,sBAA/B;AAEA;;;AAGG;;AACH,OAAM,SAAU,oBAAV,CAAwC,IAAxC,EAAkD,IAAlD,EAA0E;EAC9E,SAAS,KAAT,CAAe,YAAf,EAAwC;IACtC,OAAQ,WAAD,IAAiE;MACtE,IAAI,WAAW,KAAK,KAApB,EAA2B;QACzB,OAAO;UAAE,QAAQ,EAAE,IAAZ;UAAkB;QAAlB,CAAP;MACD,CAFD,MAEO,IAAI,OAAO,WAAP,KAAuB,QAAvB,KAAoC,WAAW,CAAC,QAAZ,IAAwB,WAAW,CAAC,KAAxE,CAAJ,EAAoF;QACzF,OAAO,WAAP;MACD;;MACD,OAAO,IAAP;IACD,CAPD;EAQD;;EAED,OAAO,CAAC,KAAD,EAAW,KAAX,KAAyC;IAC9C,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAN,CAAU,IAAI,IAAG;MAChC,MAAM;QAAE,OAAF;QAAW,YAAX;QAAyB;MAAzB,IAAoC,IAA1C;MACA,OAAO,OAAO,CAAC,OAAR,CAAgB,OAAO,CAAC,KAAD,EAAQ,IAAR,EAAc,IAAd,CAAvB,EAA4C,IAA5C,CACL,KAAK,CACH,kBAAkB,CAAI,YAAJ,EAAkB,EAClC,GAAG,MAD+B;QAElC,IAAI,EAAE,KAAK,CAAC,OAAN,CAAc,IAAd,IAAsB,IAAI,CAAC,IAAL,CAAU,GAAV,CAAtB,GAAuC;MAFX,CAAlB,CADf,CADA,CAAP;IAQD,CAVgB,CAAjB;IAYA,OAAO,OAAO,CAAC,GAAR,CAAY,QAAZ,EAAsB,IAAtB,CAA2B,OAAO,IACvC,OAAO,CAAC,IAAR,CAAc,IAAD,IAAiC,IAAI,KAAI,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAA,IAAI,CAAE,QAAV,CAAlD,CADK,CAAP;EAGD,CAhBD;AAiBD;AAED,eAAe,oBAAf","sourceRoot":"","sourcesContent":["import formatErrorMessage from './formatErrorMessage';\n/**\n * Create a data asynchronous validator\n * @param data\n */\nexport function createValidatorAsync(data, name) {\n    function check(errorMessage) {\n        return (checkResult) => {\n            if (checkResult === false) {\n                return { hasError: true, errorMessage };\n            }\n            else if (typeof checkResult === 'object' && (checkResult.hasError || checkResult.array)) {\n                return checkResult;\n            }\n            return null;\n        };\n    }\n    return (value, rules) => {\n        const promises = rules.map(rule => {\n            const { onValid, errorMessage, params } = rule;\n            return Promise.resolve(onValid(value, data, name)).then(check(formatErrorMessage(errorMessage, {\n                ...params,\n                name: Array.isArray(name) ? name.join('.') : name\n            })));\n        });\n        return Promise.all(promises).then(results => results.find((item) => item && (item === null || item === void 0 ? void 0 : item.hasError)));\n    };\n}\nexport default createValidatorAsync;\n//# sourceMappingURL=createValidatorAsync.js.map"]},"metadata":{},"sourceType":"module"}