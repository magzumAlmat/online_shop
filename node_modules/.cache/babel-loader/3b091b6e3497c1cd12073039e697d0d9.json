{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HIDE_TIMEOUT = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.OverlayComponent = OverlayComponent;\nexports.defaultFormat = defaultFormat;\nexports.defaultParse = defaultParse;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _DayPicker = require('./DayPicker');\n\nvar _DayPicker2 = _interopRequireDefault(_DayPicker);\n\nvar _DateUtils = require('./DateUtils');\n\nvar _ModifiersUtils = require('./ModifiersUtils');\n\nvar _keys = require('./keys');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n} // When clicking on a day cell, overlay will be hidden after this timeout\n\n\nvar HIDE_TIMEOUT = exports.HIDE_TIMEOUT = 100;\n/**\n * The default component used as Overlay.\n *\n * @param {Object} props\n */\n\nfunction OverlayComponent(_ref) {\n  var input = _ref.input,\n      selectedDay = _ref.selectedDay,\n      month = _ref.month,\n      children = _ref.children,\n      classNames = _ref.classNames,\n      props = _objectWithoutProperties(_ref, ['input', 'selectedDay', 'month', 'children', 'classNames']);\n\n  return _react2.default.createElement('div', _extends({\n    className: classNames.overlayWrapper\n  }, props), _react2.default.createElement('div', {\n    className: classNames.overlay\n  }, children));\n}\n/**\n * The default function used to format a Date to String, passed to the `format`\n * prop.\n * @param {Date} d\n * @return {String}\n */\n\n\nfunction defaultFormat(d) {\n  if ((0, _DateUtils.isDate)(d)) {\n    var year = d.getFullYear();\n    var month = '' + (d.getMonth() + 1);\n    var day = '' + d.getDate();\n    return year + '-' + month + '-' + day;\n  }\n\n  return '';\n}\n/**\n * The default function used to parse a String as Date, passed to the `parse`\n * prop.\n * @param {String} str\n * @return {Date}\n */\n\n\nfunction defaultParse(str) {\n  if (typeof str !== 'string') {\n    return undefined;\n  }\n\n  var split = str.split('-');\n\n  if (split.length !== 3) {\n    return undefined;\n  }\n\n  var year = parseInt(split[0], 10);\n  var month = parseInt(split[1], 10) - 1;\n  var day = parseInt(split[2], 10);\n\n  if (isNaN(year) || String(year).length > 4 || isNaN(month) || isNaN(day) || day <= 0 || day > 31 || month < 0 || month >= 12) {\n    return undefined;\n  }\n\n  return new Date(year, month, day, 12, 0, 0, 0); // always set noon to avoid time zone issues\n}\n\nvar DayPickerInput = function (_React$Component) {\n  _inherits(DayPickerInput, _React$Component);\n\n  function DayPickerInput(props) {\n    _classCallCheck(this, DayPickerInput);\n\n    var _this = _possibleConstructorReturn(this, (DayPickerInput.__proto__ || Object.getPrototypeOf(DayPickerInput)).call(this, props));\n\n    _this.input = null;\n    _this.daypicker = null;\n    _this.clickTimeout = null;\n    _this.hideTimeout = null;\n    _this.inputBlurTimeout = null;\n    _this.inputFocusTimeout = null;\n    _this.state = _this.getInitialStateFromProps(props);\n    _this.state.showOverlay = props.showOverlay;\n    _this.hideAfterDayClick = _this.hideAfterDayClick.bind(_this);\n    _this.handleInputClick = _this.handleInputClick.bind(_this);\n    _this.handleInputFocus = _this.handleInputFocus.bind(_this);\n    _this.handleInputBlur = _this.handleInputBlur.bind(_this);\n    _this.handleInputChange = _this.handleInputChange.bind(_this);\n    _this.handleInputKeyDown = _this.handleInputKeyDown.bind(_this);\n    _this.handleInputKeyUp = _this.handleInputKeyUp.bind(_this);\n    _this.handleDayClick = _this.handleDayClick.bind(_this);\n    _this.handleMonthChange = _this.handleMonthChange.bind(_this);\n    _this.handleOverlayFocus = _this.handleOverlayFocus.bind(_this);\n    _this.handleOverlayBlur = _this.handleOverlayBlur.bind(_this);\n    return _this;\n  }\n\n  _createClass(DayPickerInput, [{\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var newState = {}; // Current props\n\n      var _props = this.props,\n          value = _props.value,\n          formatDate = _props.formatDate,\n          format = _props.format,\n          dayPickerProps = _props.dayPickerProps; // Update the input value if `value`, `dayPickerProps.locale` or `format`\n      // props have changed\n\n      if (value !== prevProps.value || dayPickerProps.locale !== prevProps.dayPickerProps.locale || format !== prevProps.format) {\n        if ((0, _DateUtils.isDate)(value)) {\n          newState.value = formatDate(value, format, dayPickerProps.locale);\n        } else {\n          newState.value = value;\n        }\n      } // Update the month if the months from props changed\n\n\n      var prevMonth = prevProps.dayPickerProps.month;\n\n      if (dayPickerProps.month && dayPickerProps.month !== prevMonth && !(0, _DateUtils.isSameMonth)(dayPickerProps.month, prevMonth)) {\n        newState.month = dayPickerProps.month;\n      } // Updated the selected days from props if they changed\n\n\n      if (prevProps.dayPickerProps.selectedDays !== dayPickerProps.selectedDays) {\n        newState.selectedDays = dayPickerProps.selectedDays;\n      }\n\n      if (Object.keys(newState).length > 0) {\n        // eslint-disable-next-line react/no-did-update-set-state\n        this.setState(newState);\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      clearTimeout(this.clickTimeout);\n      clearTimeout(this.hideTimeout);\n      clearTimeout(this.inputFocusTimeout);\n      clearTimeout(this.inputBlurTimeout);\n      clearTimeout(this.overlayBlurTimeout);\n    }\n  }, {\n    key: 'getInitialMonthFromProps',\n    value: function getInitialMonthFromProps(props) {\n      var dayPickerProps = props.dayPickerProps,\n          format = props.format;\n      var day = void 0;\n\n      if (props.value) {\n        if ((0, _DateUtils.isDate)(props.value)) {\n          day = props.value;\n        } else {\n          day = props.parseDate(props.value, format, dayPickerProps.locale);\n        }\n      }\n\n      return dayPickerProps.initialMonth || dayPickerProps.month || day || new Date();\n    }\n  }, {\n    key: 'getInitialStateFromProps',\n    value: function getInitialStateFromProps(props) {\n      var dayPickerProps = props.dayPickerProps,\n          formatDate = props.formatDate,\n          format = props.format,\n          typedValue = props.typedValue;\n      var value = props.value;\n\n      if (props.value && (0, _DateUtils.isDate)(props.value)) {\n        value = formatDate(props.value, format, dayPickerProps.locale);\n      }\n\n      return {\n        value: value,\n        typedValue: typedValue,\n        month: this.getInitialMonthFromProps(props),\n        selectedDays: dayPickerProps.selectedDays\n      };\n    }\n  }, {\n    key: 'getInput',\n    value: function getInput() {\n      return this.input;\n    }\n  }, {\n    key: 'getDayPicker',\n    value: function getDayPicker() {\n      return this.daypicker;\n    }\n    /**\n     * Update the component's state and fire the `onDayChange` event passing the\n     * day's modifiers to it.\n     *\n     * @param {Date} day - Will be used for changing the month\n     * @param {String} value - Input field value\n     * @private\n     */\n\n  }, {\n    key: 'updateState',\n    value: function updateState(day, value, callback) {\n      var _this2 = this;\n\n      var _props2 = this.props,\n          dayPickerProps = _props2.dayPickerProps,\n          onDayChange = _props2.onDayChange;\n      this.setState({\n        month: day,\n        value: value,\n        typedValue: ''\n      }, function () {\n        if (callback) {\n          callback();\n        }\n\n        if (!onDayChange) {\n          return;\n        }\n\n        var modifiersObj = _extends({\n          disabled: dayPickerProps.disabledDays,\n          selected: dayPickerProps.selectedDays\n        }, dayPickerProps.modifiers);\n\n        var modifiers = (0, _ModifiersUtils.getModifiersForDay)(day, modifiersObj).reduce(function (obj, modifier) {\n          return _extends({}, obj, _defineProperty({}, modifier, true));\n        }, {});\n        onDayChange(day, modifiers, _this2);\n      });\n    }\n    /**\n     * Show the Day Picker overlay.\n     *\n     * @memberof DayPickerInput\n     */\n\n  }, {\n    key: 'showDayPicker',\n    value: function showDayPicker() {\n      var _this3 = this;\n\n      var _props3 = this.props,\n          parseDate = _props3.parseDate,\n          format = _props3.format,\n          dayPickerProps = _props3.dayPickerProps;\n      var _state = this.state,\n          value = _state.value,\n          showOverlay = _state.showOverlay;\n\n      if (showOverlay) {\n        return;\n      } // Reset the current displayed month when showing the overlay\n\n\n      var month = value ? parseDate(value, format, dayPickerProps.locale) // Use the month in the input field\n      : this.getInitialMonthFromProps(this.props); // Restore the month from the props\n\n      this.setState(function (state) {\n        return {\n          showOverlay: true,\n          month: month || state.month\n        };\n      }, function () {\n        if (_this3.props.onDayPickerShow) _this3.props.onDayPickerShow();\n      });\n    }\n    /**\n     * Hide the Day Picker overlay\n     *\n     * @memberof DayPickerInput\n     */\n\n  }, {\n    key: 'hideDayPicker',\n    value: function hideDayPicker() {\n      var _this4 = this;\n\n      if (this.state.showOverlay === false) {\n        return;\n      }\n\n      this.setState({\n        showOverlay: false\n      }, function () {\n        if (_this4.props.onDayPickerHide) _this4.props.onDayPickerHide();\n      });\n    }\n  }, {\n    key: 'hideAfterDayClick',\n    value: function hideAfterDayClick() {\n      var _this5 = this;\n\n      if (!this.props.hideOnDayClick) {\n        return;\n      }\n\n      this.hideTimeout = setTimeout(function () {\n        _this5.overlayHasFocus = false;\n\n        _this5.hideDayPicker();\n      }, HIDE_TIMEOUT);\n    }\n  }, {\n    key: 'handleInputClick',\n    value: function handleInputClick(e) {\n      this.showDayPicker();\n\n      if (this.props.inputProps.onClick) {\n        e.persist();\n        this.props.inputProps.onClick(e);\n      }\n    }\n  }, {\n    key: 'handleInputFocus',\n    value: function handleInputFocus(e) {\n      var _this6 = this;\n\n      this.showDayPicker(); // Set `overlayHasFocus` after a timeout so the overlay can be hidden when\n      // the input is blurred\n\n      this.inputFocusTimeout = setTimeout(function () {\n        _this6.overlayHasFocus = false;\n      }, 2);\n\n      if (this.props.inputProps.onFocus) {\n        e.persist();\n        this.props.inputProps.onFocus(e);\n      }\n    } // When the input is blurred, the overlay should disappear. However the input\n    // is blurred also when the user interacts with the overlay (e.g. the overlay\n    // get the focus by clicking it). In these cases, the overlay should not be\n    // hidden. There are different approaches to avoid hiding the overlay when\n    // this happens, but the only cross-browser hack we’ve found is to set all\n    // these timeouts in code before changing `overlayHasFocus`.\n\n  }, {\n    key: 'handleInputBlur',\n    value: function handleInputBlur(e) {\n      var _this7 = this;\n\n      this.inputBlurTimeout = setTimeout(function () {\n        if (!_this7.overlayHasFocus) {\n          _this7.hideDayPicker();\n        }\n      }, 1);\n\n      if (this.props.inputProps.onBlur) {\n        e.persist();\n        this.props.inputProps.onBlur(e);\n      }\n    }\n  }, {\n    key: 'handleOverlayFocus',\n    value: function handleOverlayFocus(e) {\n      e.preventDefault();\n      this.overlayHasFocus = true;\n\n      if (!this.props.keepFocus || !this.input || typeof this.input.focus !== 'function') {\n        return;\n      }\n\n      this.input.focus();\n    }\n  }, {\n    key: 'handleOverlayBlur',\n    value: function handleOverlayBlur() {\n      var _this8 = this; // We need to set a timeout otherwise IE11 will hide the overlay when\n      // focusing it\n\n\n      this.overlayBlurTimeout = setTimeout(function () {\n        _this8.overlayHasFocus = false;\n      }, 3);\n    }\n  }, {\n    key: 'handleInputChange',\n    value: function handleInputChange(e) {\n      var _props4 = this.props,\n          dayPickerProps = _props4.dayPickerProps,\n          format = _props4.format,\n          inputProps = _props4.inputProps,\n          onDayChange = _props4.onDayChange,\n          parseDate = _props4.parseDate;\n\n      if (inputProps.onChange) {\n        e.persist();\n        inputProps.onChange(e);\n      }\n\n      var value = e.target.value;\n\n      if (value.trim() === '') {\n        this.setState({\n          value: value,\n          typedValue: ''\n        });\n        if (onDayChange) onDayChange(undefined, {}, this);\n        return;\n      }\n\n      var day = parseDate(value, format, dayPickerProps.locale);\n\n      if (!day) {\n        // Day is invalid: we save the value in the typedValue state\n        this.setState({\n          value: value,\n          typedValue: value\n        });\n        if (onDayChange) onDayChange(undefined, {}, this);\n        return;\n      }\n\n      this.updateState(day, value);\n    }\n  }, {\n    key: 'handleInputKeyDown',\n    value: function handleInputKeyDown(e) {\n      if (e.keyCode === _keys.TAB) {\n        this.hideDayPicker();\n      } else {\n        this.showDayPicker();\n      }\n\n      if (this.props.inputProps.onKeyDown) {\n        e.persist();\n        this.props.inputProps.onKeyDown(e);\n      }\n    }\n  }, {\n    key: 'handleInputKeyUp',\n    value: function handleInputKeyUp(e) {\n      if (e.keyCode === _keys.ESC) {\n        this.hideDayPicker();\n      } else {\n        this.showDayPicker();\n      }\n\n      if (this.props.inputProps.onKeyUp) {\n        e.persist();\n        this.props.inputProps.onKeyUp(e);\n      }\n    }\n  }, {\n    key: 'handleMonthChange',\n    value: function handleMonthChange(month) {\n      var _this9 = this;\n\n      this.setState({\n        month: month\n      }, function () {\n        if (_this9.props.dayPickerProps && _this9.props.dayPickerProps.onMonthChange) {\n          _this9.props.dayPickerProps.onMonthChange(month);\n        }\n      });\n    }\n  }, {\n    key: 'handleDayClick',\n    value: function handleDayClick(day, modifiers, e) {\n      var _this10 = this;\n\n      var _props5 = this.props,\n          clickUnselectsDay = _props5.clickUnselectsDay,\n          dayPickerProps = _props5.dayPickerProps,\n          onDayChange = _props5.onDayChange,\n          formatDate = _props5.formatDate,\n          format = _props5.format;\n\n      if (dayPickerProps.onDayClick) {\n        dayPickerProps.onDayClick(day, modifiers, e);\n      } // Do nothing if the day is disabled\n\n\n      if (modifiers.disabled || dayPickerProps && dayPickerProps.classNames && modifiers[dayPickerProps.classNames.disabled]) {\n        return;\n      } // If the clicked day is already selected, remove the clicked day\n      // from the selected days and empty the field value\n\n\n      if (modifiers.selected && clickUnselectsDay) {\n        var selectedDays = this.state.selectedDays;\n\n        if (Array.isArray(selectedDays)) {\n          selectedDays = selectedDays.slice(0);\n          var selectedDayIdx = selectedDays.indexOf(day);\n          selectedDays.splice(selectedDayIdx, 1);\n        } else if (selectedDays) {\n          selectedDays = null;\n        }\n\n        this.setState({\n          value: '',\n          typedValue: '',\n          selectedDays: selectedDays\n        }, this.hideAfterDayClick);\n\n        if (onDayChange) {\n          onDayChange(undefined, modifiers, this);\n        }\n\n        return;\n      }\n\n      var value = formatDate(day, format, dayPickerProps.locale);\n      this.setState({\n        value: value,\n        typedValue: '',\n        month: day\n      }, function () {\n        if (onDayChange) {\n          onDayChange(day, modifiers, _this10);\n        }\n\n        _this10.hideAfterDayClick();\n      });\n    }\n  }, {\n    key: 'renderOverlay',\n    value: function renderOverlay() {\n      var _this11 = this;\n\n      var _props6 = this.props,\n          classNames = _props6.classNames,\n          dayPickerProps = _props6.dayPickerProps,\n          parseDate = _props6.parseDate,\n          formatDate = _props6.formatDate,\n          format = _props6.format;\n      var _state2 = this.state,\n          selectedDays = _state2.selectedDays,\n          value = _state2.value;\n      var selectedDay = void 0;\n\n      if (!selectedDays && value) {\n        var day = parseDate(value, format, dayPickerProps.locale);\n\n        if (day) {\n          selectedDay = day;\n        }\n      } else if (selectedDays) {\n        selectedDay = selectedDays;\n      }\n\n      var onTodayButtonClick = void 0;\n\n      if (dayPickerProps.todayButton) {\n        // Set the current day when clicking the today button\n        onTodayButtonClick = function onTodayButtonClick() {\n          return _this11.updateState(new Date(), formatDate(new Date(), format, dayPickerProps.locale), _this11.hideAfterDayClick);\n        };\n      }\n\n      var Overlay = this.props.overlayComponent;\n      return _react2.default.createElement(Overlay, {\n        classNames: classNames,\n        month: this.state.month,\n        selectedDay: selectedDay,\n        input: this.input,\n        tabIndex: 0 // tabIndex is necessary to catch focus/blur events on Safari\n        ,\n        onFocus: this.handleOverlayFocus,\n        onBlur: this.handleOverlayBlur\n      }, _react2.default.createElement(_DayPicker2.default, _extends({\n        ref: function ref(el) {\n          return _this11.daypicker = el;\n        },\n        onTodayButtonClick: onTodayButtonClick\n      }, dayPickerProps, {\n        month: this.state.month,\n        selectedDays: selectedDay,\n        onDayClick: this.handleDayClick,\n        onMonthChange: this.handleMonthChange\n      })));\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this12 = this;\n\n      var Input = this.props.component;\n      var inputProps = this.props.inputProps;\n      return _react2.default.createElement('div', {\n        className: this.props.classNames.container,\n        style: this.props.style\n      }, _react2.default.createElement(Input, _extends({\n        ref: function ref(el) {\n          return _this12.input = el;\n        },\n        placeholder: this.props.placeholder\n      }, inputProps, {\n        value: this.state.value || this.state.typedValue,\n        onChange: this.handleInputChange,\n        onFocus: this.handleInputFocus,\n        onBlur: this.handleInputBlur,\n        onKeyDown: this.handleInputKeyDown,\n        onKeyUp: this.handleInputKeyUp,\n        onClick: !inputProps.disabled ? this.handleInputClick : undefined\n      })), this.state.showOverlay && this.renderOverlay());\n    }\n  }]);\n\n  return DayPickerInput;\n}(_react2.default.Component);\n\nDayPickerInput.defaultProps = {\n  dayPickerProps: {},\n  value: '',\n  typedValue: '',\n  placeholder: 'YYYY-M-D',\n  format: 'L',\n  formatDate: defaultFormat,\n  parseDate: defaultParse,\n  showOverlay: false,\n  hideOnDayClick: true,\n  clickUnselectsDay: false,\n  keepFocus: true,\n  component: 'input',\n  inputProps: {},\n  overlayComponent: OverlayComponent,\n  classNames: {\n    container: 'DayPickerInput',\n    overlayWrapper: 'DayPickerInput-OverlayWrapper',\n    overlay: 'DayPickerInput-Overlay'\n  }\n};\nexports.default = DayPickerInput;","map":{"version":3,"sources":["../src/DayPickerInput.js"],"names":["HIDE_TIMEOUT","OverlayComponent","input","selectedDay","month","children","classNames","props","defaultFormat","year","d","day","defaultParse","split","str","parseInt","isNaN","String","DayPickerInput","React","Component","daypicker","clickTimeout","hideTimeout","inputBlurTimeout","inputFocusTimeout","defaultProps","dayPickerProps","value","typedValue","placeholder","format","formatDate","parseDate","showOverlay","hideOnDayClick","clickUnselectsDay","keepFocus","component","inputProps","overlayComponent","container","overlayWrapper","overlay","prevProps","newState","prevMonth","Object","clearTimeout","selectedDays","callback","onDayChange","disabled","selected","modifiers","state","e","TAB","ESC","Array","selectedDayIdx","onTodayButtonClick","Overlay","handleOverlayBlur","handleMonthChange","Input","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport DayPicker from './DayPicker';\nimport { isSameMonth, isDate } from './DateUtils';\nimport { getModifiersForDay } from './ModifiersUtils';\nimport { ESC, TAB } from './keys';\n\n// When clicking on a day cell, overlay will be hidden after this timeout\nexport const HIDE_TIMEOUT = 100;\n\n/**\n * The default component used as Overlay.\n *\n * @param {Object} props\n */\nexport function OverlayComponent({\n  input,\n  selectedDay,\n  month,\n  children,\n  classNames,\n  ...props\n}) {\n  return (\n    <div className={classNames.overlayWrapper} {...props}>\n      <div className={classNames.overlay}>{children}</div>\n    </div>\n  );\n}\n\nOverlayComponent.propTypes = {\n  input: PropTypes.any,\n  selectedDay: PropTypes.any,\n  month: PropTypes.instanceOf(Date),\n  children: PropTypes.node,\n  classNames: PropTypes.object,\n};\n\n/**\n * The default function used to format a Date to String, passed to the `format`\n * prop.\n * @param {Date} d\n * @return {String}\n */\nexport function defaultFormat(d) {\n  if (isDate(d)) {\n    const year = d.getFullYear();\n    const month = `${d.getMonth() + 1}`;\n    const day = `${d.getDate()}`;\n    return `${year}-${month}-${day}`;\n  }\n  return '';\n}\n\n/**\n * The default function used to parse a String as Date, passed to the `parse`\n * prop.\n * @param {String} str\n * @return {Date}\n */\nexport function defaultParse(str) {\n  if (typeof str !== 'string') {\n    return undefined;\n  }\n  const split = str.split('-');\n  if (split.length !== 3) {\n    return undefined;\n  }\n  const year = parseInt(split[0], 10);\n  const month = parseInt(split[1], 10) - 1;\n  const day = parseInt(split[2], 10);\n  if (\n    isNaN(year) ||\n    String(year).length > 4 ||\n    isNaN(month) ||\n    isNaN(day) ||\n    day <= 0 ||\n    day > 31 ||\n    month < 0 ||\n    month >= 12\n  ) {\n    return undefined;\n  }\n\n  return new Date(year, month, day, 12, 0, 0, 0); // always set noon to avoid time zone issues\n}\n\nexport default class DayPickerInput extends React.Component {\n  input = null;\n\n  daypicker = null;\n\n  clickTimeout = null;\n\n  hideTimeout = null;\n\n  inputBlurTimeout = null;\n\n  inputFocusTimeout = null;\n\n  static propTypes = {\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),\n    inputProps: PropTypes.object,\n    placeholder: PropTypes.string,\n\n    format: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.arrayOf(PropTypes.string),\n    ]),\n\n    formatDate: PropTypes.func,\n    parseDate: PropTypes.func,\n    typedValue: PropTypes.string,\n\n    showOverlay: PropTypes.bool,\n    dayPickerProps: PropTypes.object,\n    hideOnDayClick: PropTypes.bool,\n    clickUnselectsDay: PropTypes.bool,\n    keepFocus: PropTypes.bool,\n    component: PropTypes.any,\n    overlayComponent: PropTypes.any,\n\n    style: PropTypes.object,\n    classNames: PropTypes.shape({\n      container: PropTypes.string,\n      overlayWrapper: PropTypes.string,\n      overlay: PropTypes.string.isRequired,\n    }),\n\n    onDayChange: PropTypes.func,\n    onDayPickerHide: PropTypes.func,\n    onDayPickerShow: PropTypes.func,\n    onChange: PropTypes.func,\n    onClick: PropTypes.func,\n    onFocus: PropTypes.func,\n    onBlur: PropTypes.func,\n    onKeyUp: PropTypes.func,\n  };\n\n  static defaultProps = {\n    dayPickerProps: {},\n    value: '',\n    typedValue: '',\n    placeholder: 'YYYY-M-D',\n    format: 'L',\n    formatDate: defaultFormat,\n    parseDate: defaultParse,\n    showOverlay: false,\n    hideOnDayClick: true,\n    clickUnselectsDay: false,\n    keepFocus: true,\n    component: 'input',\n    inputProps: {},\n    overlayComponent: OverlayComponent,\n    classNames: {\n      container: 'DayPickerInput',\n      overlayWrapper: 'DayPickerInput-OverlayWrapper',\n      overlay: 'DayPickerInput-Overlay',\n    },\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = this.getInitialStateFromProps(props);\n    this.state.showOverlay = props.showOverlay;\n\n    this.hideAfterDayClick = this.hideAfterDayClick.bind(this);\n    this.handleInputClick = this.handleInputClick.bind(this);\n    this.handleInputFocus = this.handleInputFocus.bind(this);\n    this.handleInputBlur = this.handleInputBlur.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleInputKeyDown = this.handleInputKeyDown.bind(this);\n    this.handleInputKeyUp = this.handleInputKeyUp.bind(this);\n    this.handleDayClick = this.handleDayClick.bind(this);\n    this.handleMonthChange = this.handleMonthChange.bind(this);\n    this.handleOverlayFocus = this.handleOverlayFocus.bind(this);\n    this.handleOverlayBlur = this.handleOverlayBlur.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    const newState = {};\n\n    // Current props\n    const { value, formatDate, format, dayPickerProps } = this.props;\n\n    // Update the input value if `value`, `dayPickerProps.locale` or `format`\n    // props have changed\n    if (\n      value !== prevProps.value ||\n      dayPickerProps.locale !== prevProps.dayPickerProps.locale ||\n      format !== prevProps.format\n    ) {\n      if (isDate(value)) {\n        newState.value = formatDate(value, format, dayPickerProps.locale);\n      } else {\n        newState.value = value;\n      }\n    }\n\n    // Update the month if the months from props changed\n    const prevMonth = prevProps.dayPickerProps.month;\n    if (\n      dayPickerProps.month &&\n      dayPickerProps.month !== prevMonth &&\n      !isSameMonth(dayPickerProps.month, prevMonth)\n    ) {\n      newState.month = dayPickerProps.month;\n    }\n\n    // Updated the selected days from props if they changed\n    if (prevProps.dayPickerProps.selectedDays !== dayPickerProps.selectedDays) {\n      newState.selectedDays = dayPickerProps.selectedDays;\n    }\n\n    if (Object.keys(newState).length > 0) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState(newState);\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.clickTimeout);\n    clearTimeout(this.hideTimeout);\n    clearTimeout(this.inputFocusTimeout);\n    clearTimeout(this.inputBlurTimeout);\n    clearTimeout(this.overlayBlurTimeout);\n  }\n\n  getInitialMonthFromProps(props) {\n    const { dayPickerProps, format } = props;\n    let day;\n    if (props.value) {\n      if (isDate(props.value)) {\n        day = props.value;\n      } else {\n        day = props.parseDate(props.value, format, dayPickerProps.locale);\n      }\n    }\n    return (\n      dayPickerProps.initialMonth || dayPickerProps.month || day || new Date()\n    );\n  }\n\n  getInitialStateFromProps(props) {\n    const { dayPickerProps, formatDate, format, typedValue } = props;\n    let { value } = props;\n    if (props.value && isDate(props.value)) {\n      value = formatDate(props.value, format, dayPickerProps.locale);\n    }\n\n    return {\n      value,\n      typedValue,\n      month: this.getInitialMonthFromProps(props),\n      selectedDays: dayPickerProps.selectedDays,\n    };\n  }\n\n  getInput() {\n    return this.input;\n  }\n\n  getDayPicker() {\n    return this.daypicker;\n  }\n\n  /**\n   * Update the component's state and fire the `onDayChange` event passing the\n   * day's modifiers to it.\n   *\n   * @param {Date} day - Will be used for changing the month\n   * @param {String} value - Input field value\n   * @private\n   */\n  updateState(day, value, callback) {\n    const { dayPickerProps, onDayChange } = this.props;\n    this.setState({ month: day, value, typedValue: '' }, () => {\n      if (callback) {\n        callback();\n      }\n      if (!onDayChange) {\n        return;\n      }\n      const modifiersObj = {\n        disabled: dayPickerProps.disabledDays,\n        selected: dayPickerProps.selectedDays,\n        ...dayPickerProps.modifiers,\n      };\n      const modifiers = getModifiersForDay(day, modifiersObj).reduce(\n        (obj, modifier) => ({\n          ...obj,\n          [modifier]: true,\n        }),\n        {}\n      );\n      onDayChange(day, modifiers, this);\n    });\n  }\n\n  /**\n   * Show the Day Picker overlay.\n   *\n   * @memberof DayPickerInput\n   */\n  showDayPicker() {\n    const { parseDate, format, dayPickerProps } = this.props;\n    const { value, showOverlay } = this.state;\n    if (showOverlay) {\n      return;\n    }\n    // Reset the current displayed month when showing the overlay\n    const month = value\n      ? parseDate(value, format, dayPickerProps.locale) // Use the month in the input field\n      : this.getInitialMonthFromProps(this.props); // Restore the month from the props\n    this.setState(\n      state => ({\n        showOverlay: true,\n        month: month || state.month,\n      }),\n      () => {\n        if (this.props.onDayPickerShow) this.props.onDayPickerShow();\n      }\n    );\n  }\n\n  /**\n   * Hide the Day Picker overlay\n   *\n   * @memberof DayPickerInput\n   */\n  hideDayPicker() {\n    if (this.state.showOverlay === false) {\n      return;\n    }\n    this.setState({ showOverlay: false }, () => {\n      if (this.props.onDayPickerHide) this.props.onDayPickerHide();\n    });\n  }\n\n  hideAfterDayClick() {\n    if (!this.props.hideOnDayClick) {\n      return;\n    }\n    this.hideTimeout = setTimeout(() => {\n      this.overlayHasFocus = false;\n      this.hideDayPicker();\n    }, HIDE_TIMEOUT);\n  }\n\n  handleInputClick(e) {\n    this.showDayPicker();\n    if (this.props.inputProps.onClick) {\n      e.persist();\n      this.props.inputProps.onClick(e);\n    }\n  }\n\n  handleInputFocus(e) {\n    this.showDayPicker();\n    // Set `overlayHasFocus` after a timeout so the overlay can be hidden when\n    // the input is blurred\n    this.inputFocusTimeout = setTimeout(() => {\n      this.overlayHasFocus = false;\n    }, 2);\n    if (this.props.inputProps.onFocus) {\n      e.persist();\n      this.props.inputProps.onFocus(e);\n    }\n  }\n\n  // When the input is blurred, the overlay should disappear. However the input\n  // is blurred also when the user interacts with the overlay (e.g. the overlay\n  // get the focus by clicking it). In these cases, the overlay should not be\n  // hidden. There are different approaches to avoid hiding the overlay when\n  // this happens, but the only cross-browser hack we’ve found is to set all\n  // these timeouts in code before changing `overlayHasFocus`.\n  handleInputBlur(e) {\n    this.inputBlurTimeout = setTimeout(() => {\n      if (!this.overlayHasFocus) {\n        this.hideDayPicker();\n      }\n    }, 1);\n    if (this.props.inputProps.onBlur) {\n      e.persist();\n      this.props.inputProps.onBlur(e);\n    }\n  }\n\n  handleOverlayFocus(e) {\n    e.preventDefault();\n    this.overlayHasFocus = true;\n    if (\n      !this.props.keepFocus ||\n      !this.input ||\n      typeof this.input.focus !== 'function'\n    ) {\n      return;\n    }\n    this.input.focus();\n  }\n\n  handleOverlayBlur() {\n    // We need to set a timeout otherwise IE11 will hide the overlay when\n    // focusing it\n    this.overlayBlurTimeout = setTimeout(() => {\n      this.overlayHasFocus = false;\n    }, 3);\n  }\n\n  handleInputChange(e) {\n    const {\n      dayPickerProps,\n      format,\n      inputProps,\n      onDayChange,\n      parseDate,\n    } = this.props;\n    if (inputProps.onChange) {\n      e.persist();\n      inputProps.onChange(e);\n    }\n    const { value } = e.target;\n    if (value.trim() === '') {\n      this.setState({ value, typedValue: '' });\n      if (onDayChange) onDayChange(undefined, {}, this);\n      return;\n    }\n    const day = parseDate(value, format, dayPickerProps.locale);\n    if (!day) {\n      // Day is invalid: we save the value in the typedValue state\n      this.setState({ value, typedValue: value });\n      if (onDayChange) onDayChange(undefined, {}, this);\n      return;\n    }\n    this.updateState(day, value);\n  }\n\n  handleInputKeyDown(e) {\n    if (e.keyCode === TAB) {\n      this.hideDayPicker();\n    } else {\n      this.showDayPicker();\n    }\n    if (this.props.inputProps.onKeyDown) {\n      e.persist();\n      this.props.inputProps.onKeyDown(e);\n    }\n  }\n\n  handleInputKeyUp(e) {\n    if (e.keyCode === ESC) {\n      this.hideDayPicker();\n    } else {\n      this.showDayPicker();\n    }\n    if (this.props.inputProps.onKeyUp) {\n      e.persist();\n      this.props.inputProps.onKeyUp(e);\n    }\n  }\n\n  handleMonthChange(month) {\n    this.setState({ month }, () => {\n      if (\n        this.props.dayPickerProps &&\n        this.props.dayPickerProps.onMonthChange\n      ) {\n        this.props.dayPickerProps.onMonthChange(month);\n      }\n    });\n  }\n\n  handleDayClick(day, modifiers, e) {\n    const {\n      clickUnselectsDay,\n      dayPickerProps,\n      onDayChange,\n      formatDate,\n      format,\n    } = this.props;\n    if (dayPickerProps.onDayClick) {\n      dayPickerProps.onDayClick(day, modifiers, e);\n    }\n\n    // Do nothing if the day is disabled\n    if (\n      modifiers.disabled ||\n      (dayPickerProps &&\n        dayPickerProps.classNames &&\n        modifiers[dayPickerProps.classNames.disabled])\n    ) {\n      return;\n    }\n\n    // If the clicked day is already selected, remove the clicked day\n    // from the selected days and empty the field value\n    if (modifiers.selected && clickUnselectsDay) {\n      let { selectedDays } = this.state;\n      if (Array.isArray(selectedDays)) {\n        selectedDays = selectedDays.slice(0);\n        const selectedDayIdx = selectedDays.indexOf(day);\n        selectedDays.splice(selectedDayIdx, 1);\n      } else if (selectedDays) {\n        selectedDays = null;\n      }\n\n      this.setState(\n        { value: '', typedValue: '', selectedDays },\n        this.hideAfterDayClick\n      );\n\n      if (onDayChange) {\n        onDayChange(undefined, modifiers, this);\n      }\n      return;\n    }\n\n    const value = formatDate(day, format, dayPickerProps.locale);\n    this.setState({ value, typedValue: '', month: day }, () => {\n      if (onDayChange) {\n        onDayChange(day, modifiers, this);\n      }\n      this.hideAfterDayClick();\n    });\n  }\n\n  renderOverlay() {\n    const {\n      classNames,\n      dayPickerProps,\n      parseDate,\n      formatDate,\n      format,\n    } = this.props;\n    const { selectedDays, value } = this.state;\n    let selectedDay;\n    if (!selectedDays && value) {\n      const day = parseDate(value, format, dayPickerProps.locale);\n      if (day) {\n        selectedDay = day;\n      }\n    } else if (selectedDays) {\n      selectedDay = selectedDays;\n    }\n    let onTodayButtonClick;\n    if (dayPickerProps.todayButton) {\n      // Set the current day when clicking the today button\n      onTodayButtonClick = () =>\n        this.updateState(\n          new Date(),\n          formatDate(new Date(), format, dayPickerProps.locale),\n          this.hideAfterDayClick\n        );\n    }\n    const Overlay = this.props.overlayComponent;\n    return (\n      <Overlay\n        classNames={classNames}\n        month={this.state.month}\n        selectedDay={selectedDay}\n        input={this.input}\n        tabIndex={0} // tabIndex is necessary to catch focus/blur events on Safari\n        onFocus={this.handleOverlayFocus}\n        onBlur={this.handleOverlayBlur}\n      >\n        <DayPicker\n          ref={el => (this.daypicker = el)}\n          onTodayButtonClick={onTodayButtonClick}\n          {...dayPickerProps}\n          month={this.state.month}\n          selectedDays={selectedDay}\n          onDayClick={this.handleDayClick}\n          onMonthChange={this.handleMonthChange}\n        />\n      </Overlay>\n    );\n  }\n\n  render() {\n    const Input = this.props.component;\n    const { inputProps } = this.props;\n    return (\n      <div className={this.props.classNames.container} style={this.props.style}>\n        <Input\n          ref={el => (this.input = el)}\n          placeholder={this.props.placeholder}\n          {...inputProps}\n          value={this.state.value || this.state.typedValue}\n          onChange={this.handleInputChange}\n          onFocus={this.handleInputFocus}\n          onBlur={this.handleInputBlur}\n          onKeyDown={this.handleInputKeyDown}\n          onKeyUp={this.handleInputKeyUp}\n          onClick={!inputProps.disabled ? this.handleInputClick : undefined}\n        />\n        {this.state.showOverlay && this.renderOverlay()}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}