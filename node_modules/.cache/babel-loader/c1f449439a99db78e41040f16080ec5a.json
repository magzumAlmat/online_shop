{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clone = clone;\nexports.isDate = isDate;\nexports.addMonths = addMonths;\nexports.isSameDay = isSameDay;\nexports.isSameMonth = isSameMonth;\nexports.isDayBefore = isDayBefore;\nexports.isDayAfter = isDayAfter;\nexports.isPastDay = isPastDay;\nexports.isFutureDay = isFutureDay;\nexports.isDayBetween = isDayBetween;\nexports.addDayToRange = addDayToRange;\nexports.isDayInRange = isDayInRange;\nexports.getWeekNumber = getWeekNumber;\n/**\n * Clone a date object.\n *\n * @export\n * @param  {Date} d The date to clone\n * @return {Date} The cloned date\n */\n\nfunction clone(d) {\n  return new Date(d.getTime());\n}\n/**\n * Return `true` if the passed value is a valid JavaScript Date object.\n *\n * @export\n * @param {any} value\n * @returns {Boolean}\n */\n\n\nfunction isDate(value) {\n  return value instanceof Date && !isNaN(value.valueOf());\n}\n/**\n * Return `d` as a new date with `n` months added.\n *\n * @export\n * @param {Date} d\n * @param {number} n\n */\n\n\nfunction addMonths(d, n) {\n  var newDate = clone(d);\n  newDate.setMonth(d.getMonth() + n);\n  return newDate;\n}\n/**\n * Return `true` if two dates are the same day, ignoring the time.\n *\n * @export\n * @param  {Date}  d1\n * @param  {Date}  d2\n * @return {Boolean}\n */\n\n\nfunction isSameDay(d1, d2) {\n  if (!d1 || !d2) {\n    return false;\n  }\n\n  return d1.getDate() === d2.getDate() && d1.getMonth() === d2.getMonth() && d1.getFullYear() === d2.getFullYear();\n}\n/**\n * Return `true` if two dates fall in the same month.\n *\n * @export\n * @param  {Date}  d1\n * @param  {Date}  d2\n * @return {Boolean}\n */\n\n\nfunction isSameMonth(d1, d2) {\n  if (!d1 || !d2) {\n    return false;\n  }\n\n  return d1.getMonth() === d2.getMonth() && d1.getFullYear() === d2.getFullYear();\n}\n/**\n * Returns `true` if the first day is before the second day.\n *\n * @export\n * @param {Date} d1\n * @param {Date} d2\n * @returns {Boolean}\n */\n\n\nfunction isDayBefore(d1, d2) {\n  var day1 = clone(d1).setHours(0, 0, 0, 0);\n  var day2 = clone(d2).setHours(0, 0, 0, 0);\n  return day1 < day2;\n}\n/**\n * Returns `true` if the first day is after the second day.\n *\n * @export\n * @param {Date} d1\n * @param {Date} d2\n * @returns {Boolean}\n */\n\n\nfunction isDayAfter(d1, d2) {\n  var day1 = clone(d1).setHours(0, 0, 0, 0);\n  var day2 = clone(d2).setHours(0, 0, 0, 0);\n  return day1 > day2;\n}\n/**\n * Return `true` if a day is in the past, e.g. yesterday or any day\n * before yesterday.\n *\n * @export\n * @param  {Date}  d\n * @return {Boolean}\n */\n\n\nfunction isPastDay(d) {\n  var today = new Date();\n  today.setHours(0, 0, 0, 0);\n  return isDayBefore(d, today);\n}\n/**\n * Return `true` if a day is in the future, e.g. tomorrow or any day\n * after tomorrow.\n *\n * @export\n * @param  {Date}  d\n * @return {Boolean}\n */\n\n\nfunction isFutureDay(d) {\n  var tomorrow = new Date(new Date().getTime() + 24 * 60 * 60 * 1000);\n  tomorrow.setHours(0, 0, 0, 0);\n  return d >= tomorrow;\n}\n/**\n * Return `true` if day `d` is between days `d1` and `d2`,\n * without including them.\n *\n * @export\n * @param  {Date}  d\n * @param  {Date}  d1\n * @param  {Date}  d2\n * @return {Boolean}\n */\n\n\nfunction isDayBetween(d, d1, d2) {\n  var date = clone(d);\n  date.setHours(0, 0, 0, 0);\n  return isDayAfter(date, d1) && isDayBefore(date, d2) || isDayAfter(date, d2) && isDayBefore(date, d1);\n}\n/**\n * Add a day to a range and return a new range. A range is an object with\n * `from` and `to` days.\n *\n * @export\n * @param {Date} day\n * @param {Object} range\n * @return {Object} Returns a new range object\n */\n\n\nfunction addDayToRange(day) {\n  var range = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    from: null,\n    to: null\n  };\n  var from = range.from,\n      to = range.to;\n\n  if (!from) {\n    from = day;\n  } else if (from && to && isSameDay(from, to) && isSameDay(day, from)) {\n    from = null;\n    to = null;\n  } else if (to && isDayBefore(day, from)) {\n    from = day;\n  } else if (to && isSameDay(day, to)) {\n    from = day;\n    to = day;\n  } else {\n    to = day;\n\n    if (isDayBefore(to, from)) {\n      to = from;\n      from = day;\n    }\n  }\n\n  return {\n    from: from,\n    to: to\n  };\n}\n/**\n * Return `true` if a day is included in a range of days.\n *\n * @export\n * @param  {Date}  day\n * @param  {Object}  range\n * @return {Boolean}\n */\n\n\nfunction isDayInRange(day, range) {\n  var from = range.from,\n      to = range.to;\n  return from && isSameDay(day, from) || to && isSameDay(day, to) || from && to && isDayBetween(day, from, to);\n}\n/**\n * Return the year's week number (as per ISO, i.e. with the week starting from monday)\n * for the given day.\n *\n * @export\n * @param {Date} day\n * @returns {Number}\n */\n\n\nfunction getWeekNumber(day) {\n  var date = clone(day);\n  date.setHours(0, 0, 0);\n  date.setDate(date.getDate() + 4 - (date.getDay() || 7));\n  return Math.ceil(((date - new Date(date.getFullYear(), 0, 1)) / 8.64e7 + 1) / 7);\n}\n\nexports.default = {\n  addDayToRange: addDayToRange,\n  addMonths: addMonths,\n  clone: clone,\n  getWeekNumber: getWeekNumber,\n  isDate: isDate,\n  isDayAfter: isDayAfter,\n  isDayBefore: isDayBefore,\n  isDayBetween: isDayBetween,\n  isDayInRange: isDayInRange,\n  isFutureDay: isFutureDay,\n  isPastDay: isPastDay,\n  isSameDay: isSameDay,\n  isSameMonth: isSameMonth\n};","map":{"version":3,"sources":["../src/DateUtils.js"],"names":["clone","d","isDate","value","isNaN","addMonths","newDate","isSameDay","d1","d2","isSameMonth","isDayBefore","day1","day2","isDayAfter","isPastDay","today","isFutureDay","tomorrow","isDayBetween","date","addDayToRange","range","from","to","isDayInRange","getWeekNumber","Math"],"mappings":"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","sourcesContent":["/**\n * Clone a date object.\n *\n * @export\n * @param  {Date} d The date to clone\n * @return {Date} The cloned date\n */\nexport function clone(d) {\n  return new Date(d.getTime());\n}\n\n/**\n * Return `true` if the passed value is a valid JavaScript Date object.\n *\n * @export\n * @param {any} value\n * @returns {Boolean}\n */\nexport function isDate(value) {\n  return value instanceof Date && !isNaN(value.valueOf());\n}\n\n/**\n * Return `d` as a new date with `n` months added.\n *\n * @export\n * @param {Date} d\n * @param {number} n\n */\nexport function addMonths(d, n) {\n  const newDate = clone(d);\n  newDate.setMonth(d.getMonth() + n);\n  return newDate;\n}\n\n/**\n * Return `true` if two dates are the same day, ignoring the time.\n *\n * @export\n * @param  {Date}  d1\n * @param  {Date}  d2\n * @return {Boolean}\n */\nexport function isSameDay(d1, d2) {\n  if (!d1 || !d2) {\n    return false;\n  }\n  return (\n    d1.getDate() === d2.getDate() &&\n    d1.getMonth() === d2.getMonth() &&\n    d1.getFullYear() === d2.getFullYear()\n  );\n}\n\n/**\n * Return `true` if two dates fall in the same month.\n *\n * @export\n * @param  {Date}  d1\n * @param  {Date}  d2\n * @return {Boolean}\n */\nexport function isSameMonth(d1, d2) {\n  if (!d1 || !d2) {\n    return false;\n  }\n  return (\n    d1.getMonth() === d2.getMonth() && d1.getFullYear() === d2.getFullYear()\n  );\n}\n\n/**\n * Returns `true` if the first day is before the second day.\n *\n * @export\n * @param {Date} d1\n * @param {Date} d2\n * @returns {Boolean}\n */\nexport function isDayBefore(d1, d2) {\n  const day1 = clone(d1).setHours(0, 0, 0, 0);\n  const day2 = clone(d2).setHours(0, 0, 0, 0);\n  return day1 < day2;\n}\n\n/**\n * Returns `true` if the first day is after the second day.\n *\n * @export\n * @param {Date} d1\n * @param {Date} d2\n * @returns {Boolean}\n */\nexport function isDayAfter(d1, d2) {\n  const day1 = clone(d1).setHours(0, 0, 0, 0);\n  const day2 = clone(d2).setHours(0, 0, 0, 0);\n  return day1 > day2;\n}\n\n/**\n * Return `true` if a day is in the past, e.g. yesterday or any day\n * before yesterday.\n *\n * @export\n * @param  {Date}  d\n * @return {Boolean}\n */\nexport function isPastDay(d) {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  return isDayBefore(d, today);\n}\n\n/**\n * Return `true` if a day is in the future, e.g. tomorrow or any day\n * after tomorrow.\n *\n * @export\n * @param  {Date}  d\n * @return {Boolean}\n */\nexport function isFutureDay(d) {\n  const tomorrow = new Date(new Date().getTime() + 24 * 60 * 60 * 1000);\n  tomorrow.setHours(0, 0, 0, 0);\n  return d >= tomorrow;\n}\n\n/**\n * Return `true` if day `d` is between days `d1` and `d2`,\n * without including them.\n *\n * @export\n * @param  {Date}  d\n * @param  {Date}  d1\n * @param  {Date}  d2\n * @return {Boolean}\n */\nexport function isDayBetween(d, d1, d2) {\n  const date = clone(d);\n  date.setHours(0, 0, 0, 0);\n  return (\n    (isDayAfter(date, d1) && isDayBefore(date, d2)) ||\n    (isDayAfter(date, d2) && isDayBefore(date, d1))\n  );\n}\n\n/**\n * Add a day to a range and return a new range. A range is an object with\n * `from` and `to` days.\n *\n * @export\n * @param {Date} day\n * @param {Object} range\n * @return {Object} Returns a new range object\n */\nexport function addDayToRange(day, range = { from: null, to: null }) {\n  let { from, to } = range;\n  if (!from) {\n    from = day;\n  } else if (from && to && isSameDay(from, to) && isSameDay(day, from)) {\n    from = null;\n    to = null;\n  } else if (to && isDayBefore(day, from)) {\n    from = day;\n  } else if (to && isSameDay(day, to)) {\n    from = day;\n    to = day;\n  } else {\n    to = day;\n    if (isDayBefore(to, from)) {\n      to = from;\n      from = day;\n    }\n  }\n\n  return { from, to };\n}\n\n/**\n * Return `true` if a day is included in a range of days.\n *\n * @export\n * @param  {Date}  day\n * @param  {Object}  range\n * @return {Boolean}\n */\nexport function isDayInRange(day, range) {\n  const { from, to } = range;\n  return (\n    (from && isSameDay(day, from)) ||\n    (to && isSameDay(day, to)) ||\n    (from && to && isDayBetween(day, from, to))\n  );\n}\n\n/**\n * Return the year's week number (as per ISO, i.e. with the week starting from monday)\n * for the given day.\n *\n * @export\n * @param {Date} day\n * @returns {Number}\n */\nexport function getWeekNumber(day) {\n  const date = clone(day);\n  date.setHours(0, 0, 0);\n  date.setDate(date.getDate() + 4 - (date.getDay() || 7));\n  return Math.ceil(\n    ((date - new Date(date.getFullYear(), 0, 1)) / 8.64e7 + 1) / 7\n  );\n}\n\nexport default {\n  addDayToRange,\n  addMonths,\n  clone,\n  getWeekNumber,\n  isDate,\n  isDayAfter,\n  isDayBefore,\n  isDayBetween,\n  isDayInRange,\n  isFutureDay,\n  isPastDay,\n  isSameDay,\n  isSameMonth,\n};\n"]},"metadata":{},"sourceType":"script"}