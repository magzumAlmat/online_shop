{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport '../Button'; // So we don't have any override priority issue.\n\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: 8,\n    justifyContent: 'flex-end'\n  },\n\n  /* Styles applied to the root element if `disableSpacing={false}`. */\n  spacing: {\n    '& > * + *': {\n      marginLeft: 8\n    }\n  }\n};\nvar ExpansionPanelActions = React.forwardRef(function ExpansionPanelActions(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$disableSpacing = props.disableSpacing,\n      disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"disableSpacing\"]);\n\n  return React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, !disableSpacing && classes.spacing),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ExpansionPanelActions.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the actions do not have additional margin.\n   */\n  disableSpacing: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiExpansionPanelActions'\n})(ExpansionPanelActions);","map":{"version":3,"names":["_extends","_objectWithoutProperties","React","PropTypes","clsx","withStyles","styles","root","display","alignItems","padding","justifyContent","spacing","marginLeft","ExpansionPanelActions","forwardRef","props","ref","classes","className","_props$disableSpacing","disableSpacing","other","createElement","process","env","NODE_ENV","propTypes","children","node","isRequired","object","string","bool","name"],"sources":["/Users/billionare/Documents/eshakids/eshaKids/node_modules/@material-ui/core/esm/ExpansionPanelActions/ExpansionPanelActions.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport '../Button'; // So we don't have any override priority issue.\n\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: 8,\n    justifyContent: 'flex-end'\n  },\n\n  /* Styles applied to the root element if `disableSpacing={false}`. */\n  spacing: {\n    '& > * + *': {\n      marginLeft: 8\n    }\n  }\n};\nvar ExpansionPanelActions = React.forwardRef(function ExpansionPanelActions(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$disableSpacing = props.disableSpacing,\n      disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"disableSpacing\"]);\n\n  return React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, !disableSpacing && classes.spacing),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ExpansionPanelActions.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the actions do not have additional margin.\n   */\n  disableSpacing: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiExpansionPanelActions'\n})(ExpansionPanelActions);"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gCAArB;AACA,OAAOC,wBAAP,MAAqC,gDAArC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAO,WAAP,C,CAAoB;;AAEpB,OAAO,IAAIC,MAAM,GAAG;EAClB;EACAC,IAAI,EAAE;IACJC,OAAO,EAAE,MADL;IAEJC,UAAU,EAAE,QAFR;IAGJC,OAAO,EAAE,CAHL;IAIJC,cAAc,EAAE;EAJZ,CAFY;;EASlB;EACAC,OAAO,EAAE;IACP,aAAa;MACXC,UAAU,EAAE;IADD;EADN;AAVS,CAAb;AAgBP,IAAIC,qBAAqB,GAAGZ,KAAK,CAACa,UAAN,CAAiB,SAASD,qBAAT,CAA+BE,KAA/B,EAAsCC,GAAtC,EAA2C;EACtF,IAAIC,OAAO,GAAGF,KAAK,CAACE,OAApB;EAAA,IACIC,SAAS,GAAGH,KAAK,CAACG,SADtB;EAAA,IAEIC,qBAAqB,GAAGJ,KAAK,CAACK,cAFlC;EAAA,IAGIA,cAAc,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,KAAnC,GAA2CA,qBAHhE;EAAA,IAIIE,KAAK,GAAGrB,wBAAwB,CAACe,KAAD,EAAQ,CAAC,SAAD,EAAY,WAAZ,EAAyB,gBAAzB,CAAR,CAJpC;;EAMA,OAAOd,KAAK,CAACqB,aAAN,CAAoB,KAApB,EAA2BvB,QAAQ,CAAC;IACzCmB,SAAS,EAAEf,IAAI,CAACc,OAAO,CAACX,IAAT,EAAeY,SAAf,EAA0B,CAACE,cAAD,IAAmBH,OAAO,CAACN,OAArD,CAD0B;IAEzCK,GAAG,EAAEA;EAFoC,CAAD,EAGvCK,KAHuC,CAAnC,CAAP;AAID,CAX2B,CAA5B;AAYAE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCZ,qBAAqB,CAACa,SAAtB,GAAkC;EACxE;AACF;AACA;EACEC,QAAQ,EAAEzB,SAAS,CAAC0B,IAAV,CAAeC,UAJ+C;;EAMxE;AACF;AACA;AACA;EACEZ,OAAO,EAAEf,SAAS,CAAC4B,MAAV,CAAiBD,UAV8C;;EAYxE;AACF;AACA;EACEX,SAAS,EAAEhB,SAAS,CAAC6B,MAfmD;;EAiBxE;AACF;AACA;EACEX,cAAc,EAAElB,SAAS,CAAC8B;AApB8C,CAA1E,GAqBI,KAAK,CArBT;AAsBA,eAAe5B,UAAU,CAACC,MAAD,EAAS;EAChC4B,IAAI,EAAE;AAD0B,CAAT,CAAV,CAEZpB,qBAFY,CAAf"},"metadata":{},"sourceType":"module"}