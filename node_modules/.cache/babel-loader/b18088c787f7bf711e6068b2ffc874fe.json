{"ast":null,"code":"import formatErrorMessage from './formatErrorMessage';\n\nfunction isObj(o) {\n  return o != null && (typeof o === 'object' || typeof o == 'function');\n}\n\nfunction isPromiseLike(v) {\n  return v instanceof Promise || isObj(v) && typeof v.then === 'function';\n}\n/**\n * Create a data validator\n * @param data\n */\n\n\nexport function createValidator(data, name) {\n  return (value, rules) => {\n    for (let i = 0; i < rules.length; i += 1) {\n      const {\n        onValid,\n        errorMessage,\n        params,\n        isAsync\n      } = rules[i];\n      if (isAsync) continue;\n      const checkResult = onValid(value, data, name);\n\n      if (checkResult === false) {\n        return {\n          hasError: true,\n          errorMessage: formatErrorMessage(errorMessage, { ...params,\n            name: Array.isArray(name) ? name.join('.') : name\n          })\n        };\n      } else if (isPromiseLike(checkResult)) {\n        throw new Error('synchronous validator had an async result, you should probably call \"checkAsync()\"');\n      } else if (typeof checkResult === 'object' && (checkResult.hasError || checkResult.array)) {\n        return checkResult;\n      }\n    }\n\n    return null;\n  };\n}\nexport default createValidator;","map":{"version":3,"sources":["../../src/utils/createValidator.ts"],"names":[],"mappings":"AACA,OAAO,kBAAP,MAA+B,sBAA/B;;AACA,SAAS,KAAT,CAAe,CAAf,EAAyB;EACvB,OAAO,CAAC,IAAI,IAAL,KAAc,OAAO,CAAP,KAAa,QAAb,IAAyB,OAAO,CAAP,IAAY,UAAnD,CAAP;AACD;;AACD,SAAS,aAAT,CAAuB,CAAvB,EAAiC;EAC/B,OAAO,CAAC,YAAY,OAAb,IAAyB,KAAK,CAAC,CAAD,CAAL,IAAY,OAAO,CAAC,CAAC,IAAT,KAAkB,UAA9D;AACD;AACD;;;AAGG;;;AACH,OAAM,SAAU,eAAV,CAAmC,IAAnC,EAA6C,IAA7C,EAAqE;EACzE,OAAO,CAAC,KAAD,EAAW,KAAX,KAAgE;IACrE,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,IAAI,CAAvC,EAA0C;MACxC,MAAM;QAAE,OAAF;QAAW,YAAX;QAAyB,MAAzB;QAAiC;MAAjC,IAA6C,KAAK,CAAC,CAAD,CAAxD;MACA,IAAI,OAAJ,EAAa;MACb,MAAM,WAAW,GAAG,OAAO,CAAC,KAAD,EAAQ,IAAR,EAAc,IAAd,CAA3B;;MAEA,IAAI,WAAW,KAAK,KAApB,EAA2B;QACzB,OAAO;UACL,QAAQ,EAAE,IADL;UAEL,YAAY,EAAE,kBAAkB,CAAI,YAAJ,EAAkB,EAChD,GAAG,MAD6C;YAEhD,IAAI,EAAE,KAAK,CAAC,OAAN,CAAc,IAAd,IAAsB,IAAI,CAAC,IAAL,CAAU,GAAV,CAAtB,GAAuC;UAFG,CAAlB;QAF3B,CAAP;MAOD,CARD,MAQO,IAAI,aAAa,CAAC,WAAD,CAAjB,EAAgC;QACrC,MAAM,IAAI,KAAJ,CACJ,oFADI,CAAN;MAGD,CAJM,MAIA,IAAI,OAAO,WAAP,KAAuB,QAAvB,KAAoC,WAAW,CAAC,QAAZ,IAAwB,WAAW,CAAC,KAAxE,CAAJ,EAAoF;QACzF,OAAO,WAAP;MACD;IACF;;IAED,OAAO,IAAP;EACD,CAxBD;AAyBD;AAED,eAAe,eAAf","sourceRoot":"","sourcesContent":["import formatErrorMessage from './formatErrorMessage';\nfunction isObj(o) {\n    return o != null && (typeof o === 'object' || typeof o == 'function');\n}\nfunction isPromiseLike(v) {\n    return v instanceof Promise || (isObj(v) && typeof v.then === 'function');\n}\n/**\n * Create a data validator\n * @param data\n */\nexport function createValidator(data, name) {\n    return (value, rules) => {\n        for (let i = 0; i < rules.length; i += 1) {\n            const { onValid, errorMessage, params, isAsync } = rules[i];\n            if (isAsync)\n                continue;\n            const checkResult = onValid(value, data, name);\n            if (checkResult === false) {\n                return {\n                    hasError: true,\n                    errorMessage: formatErrorMessage(errorMessage, {\n                        ...params,\n                        name: Array.isArray(name) ? name.join('.') : name\n                    })\n                };\n            }\n            else if (isPromiseLike(checkResult)) {\n                throw new Error('synchronous validator had an async result, you should probably call \"checkAsync()\"');\n            }\n            else if (typeof checkResult === 'object' && (checkResult.hasError || checkResult.array)) {\n                return checkResult;\n            }\n        }\n        return null;\n    };\n}\nexport default createValidator;\n//# sourceMappingURL=createValidator.js.map"]},"metadata":{},"sourceType":"module"}