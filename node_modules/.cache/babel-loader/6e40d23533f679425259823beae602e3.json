{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport PointerPath from './PointerPath.js';\nimport * as graphic from '../../util/graphic.js';\nimport { setStatesStylesFromModel, toggleHoverEmphasis } from '../../util/states.js';\nimport { createTextStyle, setLabelValueAnimation, animateLabelValue } from '../../label/labelStyle.js';\nimport ChartView from '../../view/Chart.js';\nimport { parsePercent, round, linearMap } from '../../util/number.js';\nimport Sausage from '../../util/shape/sausage.js';\nimport { createSymbol } from '../../util/symbol.js';\nimport ZRImage from 'zrender/lib/graphic/Image.js';\nimport { extend, isFunction, isString, isNumber, each } from 'zrender/lib/core/util.js';\nimport { setCommonECData } from '../../util/innerStore.js';\nimport { normalizeArcAngles } from 'zrender/lib/core/PathProxy.js';\n\nfunction parsePosition(seriesModel, api) {\n  var center = seriesModel.get('center');\n  var width = api.getWidth();\n  var height = api.getHeight();\n  var size = Math.min(width, height);\n  var cx = parsePercent(center[0], api.getWidth());\n  var cy = parsePercent(center[1], api.getHeight());\n  var r = parsePercent(seriesModel.get('radius'), size / 2);\n  return {\n    cx: cx,\n    cy: cy,\n    r: r\n  };\n}\n\nfunction formatLabel(value, labelFormatter) {\n  var label = value == null ? '' : value + '';\n\n  if (labelFormatter) {\n    if (isString(labelFormatter)) {\n      label = labelFormatter.replace('{value}', label);\n    } else if (isFunction(labelFormatter)) {\n      label = labelFormatter(value);\n    }\n  }\n\n  return label;\n}\n\nvar GaugeView =\n/** @class */\nfunction (_super) {\n  __extends(GaugeView, _super);\n\n  function GaugeView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = GaugeView.type;\n    return _this;\n  }\n\n  GaugeView.prototype.render = function (seriesModel, ecModel, api) {\n    this.group.removeAll();\n    var colorList = seriesModel.get(['axisLine', 'lineStyle', 'color']);\n    var posInfo = parsePosition(seriesModel, api);\n\n    this._renderMain(seriesModel, ecModel, api, colorList, posInfo);\n\n    this._data = seriesModel.getData();\n  };\n\n  GaugeView.prototype.dispose = function () {};\n\n  GaugeView.prototype._renderMain = function (seriesModel, ecModel, api, colorList, posInfo) {\n    var group = this.group;\n    var clockwise = seriesModel.get('clockwise');\n    var startAngle = -seriesModel.get('startAngle') / 180 * Math.PI;\n    var endAngle = -seriesModel.get('endAngle') / 180 * Math.PI;\n    var axisLineModel = seriesModel.getModel('axisLine');\n    var roundCap = axisLineModel.get('roundCap');\n    var MainPath = roundCap ? Sausage : graphic.Sector;\n    var showAxis = axisLineModel.get('show');\n    var lineStyleModel = axisLineModel.getModel('lineStyle');\n    var axisLineWidth = lineStyleModel.get('width');\n    var angles = [startAngle, endAngle];\n    normalizeArcAngles(angles, !clockwise);\n    startAngle = angles[0];\n    endAngle = angles[1];\n    var angleRangeSpan = endAngle - startAngle;\n    var prevEndAngle = startAngle;\n    var sectors = [];\n\n    for (var i = 0; showAxis && i < colorList.length; i++) {\n      // Clamp\n      var percent = Math.min(Math.max(colorList[i][0], 0), 1);\n      endAngle = startAngle + angleRangeSpan * percent;\n      var sector = new MainPath({\n        shape: {\n          startAngle: prevEndAngle,\n          endAngle: endAngle,\n          cx: posInfo.cx,\n          cy: posInfo.cy,\n          clockwise: clockwise,\n          r0: posInfo.r - axisLineWidth,\n          r: posInfo.r\n        },\n        silent: true\n      });\n      sector.setStyle({\n        fill: colorList[i][1]\n      });\n      sector.setStyle(lineStyleModel.getLineStyle( // Because we use sector to simulate arc\n      // so the properties for stroking are useless\n      ['color', 'width']));\n      sectors.push(sector);\n      prevEndAngle = endAngle;\n    }\n\n    sectors.reverse();\n    each(sectors, function (sector) {\n      return group.add(sector);\n    });\n\n    var getColor = function (percent) {\n      // Less than 0\n      if (percent <= 0) {\n        return colorList[0][1];\n      }\n\n      var i;\n\n      for (i = 0; i < colorList.length; i++) {\n        if (colorList[i][0] >= percent && (i === 0 ? 0 : colorList[i - 1][0]) < percent) {\n          return colorList[i][1];\n        }\n      } // More than 1\n\n\n      return colorList[i - 1][1];\n    };\n\n    this._renderTicks(seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise, axisLineWidth);\n\n    this._renderTitleAndDetail(seriesModel, ecModel, api, getColor, posInfo);\n\n    this._renderAnchor(seriesModel, posInfo);\n\n    this._renderPointer(seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise, axisLineWidth);\n  };\n\n  GaugeView.prototype._renderTicks = function (seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise, axisLineWidth) {\n    var group = this.group;\n    var cx = posInfo.cx;\n    var cy = posInfo.cy;\n    var r = posInfo.r;\n    var minVal = +seriesModel.get('min');\n    var maxVal = +seriesModel.get('max');\n    var splitLineModel = seriesModel.getModel('splitLine');\n    var tickModel = seriesModel.getModel('axisTick');\n    var labelModel = seriesModel.getModel('axisLabel');\n    var splitNumber = seriesModel.get('splitNumber');\n    var subSplitNumber = tickModel.get('splitNumber');\n    var splitLineLen = parsePercent(splitLineModel.get('length'), r);\n    var tickLen = parsePercent(tickModel.get('length'), r);\n    var angle = startAngle;\n    var step = (endAngle - startAngle) / splitNumber;\n    var subStep = step / subSplitNumber;\n    var splitLineStyle = splitLineModel.getModel('lineStyle').getLineStyle();\n    var tickLineStyle = tickModel.getModel('lineStyle').getLineStyle();\n    var splitLineDistance = splitLineModel.get('distance');\n    var unitX;\n    var unitY;\n\n    for (var i = 0; i <= splitNumber; i++) {\n      unitX = Math.cos(angle);\n      unitY = Math.sin(angle); // Split line\n\n      if (splitLineModel.get('show')) {\n        var distance = splitLineDistance ? splitLineDistance + axisLineWidth : axisLineWidth;\n        var splitLine = new graphic.Line({\n          shape: {\n            x1: unitX * (r - distance) + cx,\n            y1: unitY * (r - distance) + cy,\n            x2: unitX * (r - splitLineLen - distance) + cx,\n            y2: unitY * (r - splitLineLen - distance) + cy\n          },\n          style: splitLineStyle,\n          silent: true\n        });\n\n        if (splitLineStyle.stroke === 'auto') {\n          splitLine.setStyle({\n            stroke: getColor(i / splitNumber)\n          });\n        }\n\n        group.add(splitLine);\n      } // Label\n\n\n      if (labelModel.get('show')) {\n        var distance = labelModel.get('distance') + splitLineDistance;\n        var label = formatLabel(round(i / splitNumber * (maxVal - minVal) + minVal), labelModel.get('formatter'));\n        var autoColor = getColor(i / splitNumber);\n        var textStyleX = unitX * (r - splitLineLen - distance) + cx;\n        var textStyleY = unitY * (r - splitLineLen - distance) + cy;\n        var rotateType = labelModel.get('rotate');\n        var rotate = 0;\n\n        if (rotateType === 'radial') {\n          rotate = -angle + 2 * Math.PI;\n\n          if (rotate > Math.PI / 2) {\n            rotate += Math.PI;\n          }\n        } else if (rotateType === 'tangential') {\n          rotate = -angle - Math.PI / 2;\n        } else if (isNumber(rotateType)) {\n          rotate = rotateType * Math.PI / 180;\n        }\n\n        if (rotate === 0) {\n          group.add(new graphic.Text({\n            style: createTextStyle(labelModel, {\n              text: label,\n              x: textStyleX,\n              y: textStyleY,\n              verticalAlign: unitY < -0.8 ? 'top' : unitY > 0.8 ? 'bottom' : 'middle',\n              align: unitX < -0.4 ? 'left' : unitX > 0.4 ? 'right' : 'center'\n            }, {\n              inheritColor: autoColor\n            }),\n            silent: true\n          }));\n        } else {\n          group.add(new graphic.Text({\n            style: createTextStyle(labelModel, {\n              text: label,\n              x: textStyleX,\n              y: textStyleY,\n              verticalAlign: 'middle',\n              align: 'center'\n            }, {\n              inheritColor: autoColor\n            }),\n            silent: true,\n            originX: textStyleX,\n            originY: textStyleY,\n            rotation: rotate\n          }));\n        }\n      } // Axis tick\n\n\n      if (tickModel.get('show') && i !== splitNumber) {\n        var distance = tickModel.get('distance');\n        distance = distance ? distance + axisLineWidth : axisLineWidth;\n\n        for (var j = 0; j <= subSplitNumber; j++) {\n          unitX = Math.cos(angle);\n          unitY = Math.sin(angle);\n          var tickLine = new graphic.Line({\n            shape: {\n              x1: unitX * (r - distance) + cx,\n              y1: unitY * (r - distance) + cy,\n              x2: unitX * (r - tickLen - distance) + cx,\n              y2: unitY * (r - tickLen - distance) + cy\n            },\n            silent: true,\n            style: tickLineStyle\n          });\n\n          if (tickLineStyle.stroke === 'auto') {\n            tickLine.setStyle({\n              stroke: getColor((i + j / subSplitNumber) / splitNumber)\n            });\n          }\n\n          group.add(tickLine);\n          angle += subStep;\n        }\n\n        angle -= subStep;\n      } else {\n        angle += step;\n      }\n    }\n  };\n\n  GaugeView.prototype._renderPointer = function (seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise, axisLineWidth) {\n    var group = this.group;\n    var oldData = this._data;\n    var oldProgressData = this._progressEls;\n    var progressList = [];\n    var showPointer = seriesModel.get(['pointer', 'show']);\n    var progressModel = seriesModel.getModel('progress');\n    var showProgress = progressModel.get('show');\n    var data = seriesModel.getData();\n    var valueDim = data.mapDimension('value');\n    var minVal = +seriesModel.get('min');\n    var maxVal = +seriesModel.get('max');\n    var valueExtent = [minVal, maxVal];\n    var angleExtent = [startAngle, endAngle];\n\n    function createPointer(idx, angle) {\n      var itemModel = data.getItemModel(idx);\n      var pointerModel = itemModel.getModel('pointer');\n      var pointerWidth = parsePercent(pointerModel.get('width'), posInfo.r);\n      var pointerLength = parsePercent(pointerModel.get('length'), posInfo.r);\n      var pointerStr = seriesModel.get(['pointer', 'icon']);\n      var pointerOffset = pointerModel.get('offsetCenter');\n      var pointerOffsetX = parsePercent(pointerOffset[0], posInfo.r);\n      var pointerOffsetY = parsePercent(pointerOffset[1], posInfo.r);\n      var pointerKeepAspect = pointerModel.get('keepAspect');\n      var pointer; // not exist icon type will be set 'rect'\n\n      if (pointerStr) {\n        pointer = createSymbol(pointerStr, pointerOffsetX - pointerWidth / 2, pointerOffsetY - pointerLength, pointerWidth, pointerLength, null, pointerKeepAspect);\n      } else {\n        pointer = new PointerPath({\n          shape: {\n            angle: -Math.PI / 2,\n            width: pointerWidth,\n            r: pointerLength,\n            x: pointerOffsetX,\n            y: pointerOffsetY\n          }\n        });\n      }\n\n      pointer.rotation = -(angle + Math.PI / 2);\n      pointer.x = posInfo.cx;\n      pointer.y = posInfo.cy;\n      return pointer;\n    }\n\n    function createProgress(idx, endAngle) {\n      var roundCap = progressModel.get('roundCap');\n      var ProgressPath = roundCap ? Sausage : graphic.Sector;\n      var isOverlap = progressModel.get('overlap');\n      var progressWidth = isOverlap ? progressModel.get('width') : axisLineWidth / data.count();\n      var r0 = isOverlap ? posInfo.r - progressWidth : posInfo.r - (idx + 1) * progressWidth;\n      var r = isOverlap ? posInfo.r : posInfo.r - idx * progressWidth;\n      var progress = new ProgressPath({\n        shape: {\n          startAngle: startAngle,\n          endAngle: endAngle,\n          cx: posInfo.cx,\n          cy: posInfo.cy,\n          clockwise: clockwise,\n          r0: r0,\n          r: r\n        }\n      });\n      isOverlap && (progress.z2 = maxVal - data.get(valueDim, idx) % maxVal);\n      return progress;\n    }\n\n    if (showProgress || showPointer) {\n      data.diff(oldData).add(function (idx) {\n        var val = data.get(valueDim, idx);\n\n        if (showPointer) {\n          var pointer = createPointer(idx, startAngle); // TODO hide pointer on NaN value?\n\n          graphic.initProps(pointer, {\n            rotation: -((isNaN(+val) ? angleExtent[0] : linearMap(val, valueExtent, angleExtent, true)) + Math.PI / 2)\n          }, seriesModel);\n          group.add(pointer);\n          data.setItemGraphicEl(idx, pointer);\n        }\n\n        if (showProgress) {\n          var progress = createProgress(idx, startAngle);\n          var isClip = progressModel.get('clip');\n          graphic.initProps(progress, {\n            shape: {\n              endAngle: linearMap(val, valueExtent, angleExtent, isClip)\n            }\n          }, seriesModel);\n          group.add(progress); // Add data index and series index for indexing the data by element\n          // Useful in tooltip\n\n          setCommonECData(seriesModel.seriesIndex, data.dataType, idx, progress);\n          progressList[idx] = progress;\n        }\n      }).update(function (newIdx, oldIdx) {\n        var val = data.get(valueDim, newIdx);\n\n        if (showPointer) {\n          var previousPointer = oldData.getItemGraphicEl(oldIdx);\n          var previousRotate = previousPointer ? previousPointer.rotation : startAngle;\n          var pointer = createPointer(newIdx, previousRotate);\n          pointer.rotation = previousRotate;\n          graphic.updateProps(pointer, {\n            rotation: -((isNaN(+val) ? angleExtent[0] : linearMap(val, valueExtent, angleExtent, true)) + Math.PI / 2)\n          }, seriesModel);\n          group.add(pointer);\n          data.setItemGraphicEl(newIdx, pointer);\n        }\n\n        if (showProgress) {\n          var previousProgress = oldProgressData[oldIdx];\n          var previousEndAngle = previousProgress ? previousProgress.shape.endAngle : startAngle;\n          var progress = createProgress(newIdx, previousEndAngle);\n          var isClip = progressModel.get('clip');\n          graphic.updateProps(progress, {\n            shape: {\n              endAngle: linearMap(val, valueExtent, angleExtent, isClip)\n            }\n          }, seriesModel);\n          group.add(progress); // Add data index and series index for indexing the data by element\n          // Useful in tooltip\n\n          setCommonECData(seriesModel.seriesIndex, data.dataType, newIdx, progress);\n          progressList[newIdx] = progress;\n        }\n      }).execute();\n      data.each(function (idx) {\n        var itemModel = data.getItemModel(idx);\n        var emphasisModel = itemModel.getModel('emphasis');\n        var focus = emphasisModel.get('focus');\n        var blurScope = emphasisModel.get('blurScope');\n        var emphasisDisabled = emphasisModel.get('disabled');\n\n        if (showPointer) {\n          var pointer = data.getItemGraphicEl(idx);\n          var symbolStyle = data.getItemVisual(idx, 'style');\n          var visualColor = symbolStyle.fill;\n\n          if (pointer instanceof ZRImage) {\n            var pathStyle = pointer.style;\n            pointer.useStyle(extend({\n              image: pathStyle.image,\n              x: pathStyle.x,\n              y: pathStyle.y,\n              width: pathStyle.width,\n              height: pathStyle.height\n            }, symbolStyle));\n          } else {\n            pointer.useStyle(symbolStyle);\n            pointer.type !== 'pointer' && pointer.setColor(visualColor);\n          }\n\n          pointer.setStyle(itemModel.getModel(['pointer', 'itemStyle']).getItemStyle());\n\n          if (pointer.style.fill === 'auto') {\n            pointer.setStyle('fill', getColor(linearMap(data.get(valueDim, idx), valueExtent, [0, 1], true)));\n          }\n\n          pointer.z2EmphasisLift = 0;\n          setStatesStylesFromModel(pointer, itemModel);\n          toggleHoverEmphasis(pointer, focus, blurScope, emphasisDisabled);\n        }\n\n        if (showProgress) {\n          var progress = progressList[idx];\n          progress.useStyle(data.getItemVisual(idx, 'style'));\n          progress.setStyle(itemModel.getModel(['progress', 'itemStyle']).getItemStyle());\n          progress.z2EmphasisLift = 0;\n          setStatesStylesFromModel(progress, itemModel);\n          toggleHoverEmphasis(progress, focus, blurScope, emphasisDisabled);\n        }\n      });\n      this._progressEls = progressList;\n    }\n  };\n\n  GaugeView.prototype._renderAnchor = function (seriesModel, posInfo) {\n    var anchorModel = seriesModel.getModel('anchor');\n    var showAnchor = anchorModel.get('show');\n\n    if (showAnchor) {\n      var anchorSize = anchorModel.get('size');\n      var anchorType = anchorModel.get('icon');\n      var offsetCenter = anchorModel.get('offsetCenter');\n      var anchorKeepAspect = anchorModel.get('keepAspect');\n      var anchor = createSymbol(anchorType, posInfo.cx - anchorSize / 2 + parsePercent(offsetCenter[0], posInfo.r), posInfo.cy - anchorSize / 2 + parsePercent(offsetCenter[1], posInfo.r), anchorSize, anchorSize, null, anchorKeepAspect);\n      anchor.z2 = anchorModel.get('showAbove') ? 1 : 0;\n      anchor.setStyle(anchorModel.getModel('itemStyle').getItemStyle());\n      this.group.add(anchor);\n    }\n  };\n\n  GaugeView.prototype._renderTitleAndDetail = function (seriesModel, ecModel, api, getColor, posInfo) {\n    var _this = this;\n\n    var data = seriesModel.getData();\n    var valueDim = data.mapDimension('value');\n    var minVal = +seriesModel.get('min');\n    var maxVal = +seriesModel.get('max');\n    var contentGroup = new graphic.Group();\n    var newTitleEls = [];\n    var newDetailEls = [];\n    var hasAnimation = seriesModel.isAnimationEnabled();\n    var showPointerAbove = seriesModel.get(['pointer', 'showAbove']);\n    data.diff(this._data).add(function (idx) {\n      newTitleEls[idx] = new graphic.Text({\n        silent: true\n      });\n      newDetailEls[idx] = new graphic.Text({\n        silent: true\n      });\n    }).update(function (idx, oldIdx) {\n      newTitleEls[idx] = _this._titleEls[oldIdx];\n      newDetailEls[idx] = _this._detailEls[oldIdx];\n    }).execute();\n    data.each(function (idx) {\n      var itemModel = data.getItemModel(idx);\n      var value = data.get(valueDim, idx);\n      var itemGroup = new graphic.Group();\n      var autoColor = getColor(linearMap(value, [minVal, maxVal], [0, 1], true));\n      var itemTitleModel = itemModel.getModel('title');\n\n      if (itemTitleModel.get('show')) {\n        var titleOffsetCenter = itemTitleModel.get('offsetCenter');\n        var titleX = posInfo.cx + parsePercent(titleOffsetCenter[0], posInfo.r);\n        var titleY = posInfo.cy + parsePercent(titleOffsetCenter[1], posInfo.r);\n        var labelEl = newTitleEls[idx];\n        labelEl.attr({\n          z2: showPointerAbove ? 0 : 2,\n          style: createTextStyle(itemTitleModel, {\n            x: titleX,\n            y: titleY,\n            text: data.getName(idx),\n            align: 'center',\n            verticalAlign: 'middle'\n          }, {\n            inheritColor: autoColor\n          })\n        });\n        itemGroup.add(labelEl);\n      }\n\n      var itemDetailModel = itemModel.getModel('detail');\n\n      if (itemDetailModel.get('show')) {\n        var detailOffsetCenter = itemDetailModel.get('offsetCenter');\n        var detailX = posInfo.cx + parsePercent(detailOffsetCenter[0], posInfo.r);\n        var detailY = posInfo.cy + parsePercent(detailOffsetCenter[1], posInfo.r);\n        var width = parsePercent(itemDetailModel.get('width'), posInfo.r);\n        var height = parsePercent(itemDetailModel.get('height'), posInfo.r);\n        var detailColor = seriesModel.get(['progress', 'show']) ? data.getItemVisual(idx, 'style').fill : autoColor;\n        var labelEl = newDetailEls[idx];\n        var formatter_1 = itemDetailModel.get('formatter');\n        labelEl.attr({\n          z2: showPointerAbove ? 0 : 2,\n          style: createTextStyle(itemDetailModel, {\n            x: detailX,\n            y: detailY,\n            text: formatLabel(value, formatter_1),\n            width: isNaN(width) ? null : width,\n            height: isNaN(height) ? null : height,\n            align: 'center',\n            verticalAlign: 'middle'\n          }, {\n            inheritColor: detailColor\n          })\n        });\n        setLabelValueAnimation(labelEl, {\n          normal: itemDetailModel\n        }, value, function (value) {\n          return formatLabel(value, formatter_1);\n        });\n        hasAnimation && animateLabelValue(labelEl, idx, data, seriesModel, {\n          getFormattedLabel: function (labelDataIndex, status, dataType, labelDimIndex, fmt, extendParams) {\n            return formatLabel(extendParams ? extendParams.interpolatedValue : value, formatter_1);\n          }\n        });\n        itemGroup.add(labelEl);\n      }\n\n      contentGroup.add(itemGroup);\n    });\n    this.group.add(contentGroup);\n    this._titleEls = newTitleEls;\n    this._detailEls = newDetailEls;\n  };\n\n  GaugeView.type = 'gauge';\n  return GaugeView;\n}(ChartView);\n\nexport default GaugeView;","map":{"version":3,"names":["__extends","PointerPath","graphic","setStatesStylesFromModel","toggleHoverEmphasis","createTextStyle","setLabelValueAnimation","animateLabelValue","ChartView","parsePercent","round","linearMap","Sausage","createSymbol","ZRImage","extend","isFunction","isString","isNumber","each","setCommonECData","normalizeArcAngles","parsePosition","seriesModel","api","center","get","width","getWidth","height","getHeight","size","Math","min","cx","cy","r","formatLabel","value","labelFormatter","label","replace","GaugeView","_super","_this","apply","arguments","type","prototype","render","ecModel","group","removeAll","colorList","posInfo","_renderMain","_data","getData","dispose","clockwise","startAngle","PI","endAngle","axisLineModel","getModel","roundCap","MainPath","Sector","showAxis","lineStyleModel","axisLineWidth","angles","angleRangeSpan","prevEndAngle","sectors","i","length","percent","max","sector","shape","r0","silent","setStyle","fill","getLineStyle","push","reverse","add","getColor","_renderTicks","_renderTitleAndDetail","_renderAnchor","_renderPointer","minVal","maxVal","splitLineModel","tickModel","labelModel","splitNumber","subSplitNumber","splitLineLen","tickLen","angle","step","subStep","splitLineStyle","tickLineStyle","splitLineDistance","unitX","unitY","cos","sin","distance","splitLine","Line","x1","y1","x2","y2","style","stroke","autoColor","textStyleX","textStyleY","rotateType","rotate","Text","text","x","y","verticalAlign","align","inheritColor","originX","originY","rotation","j","tickLine","oldData","oldProgressData","_progressEls","progressList","showPointer","progressModel","showProgress","data","valueDim","mapDimension","valueExtent","angleExtent","createPointer","idx","itemModel","getItemModel","pointerModel","pointerWidth","pointerLength","pointerStr","pointerOffset","pointerOffsetX","pointerOffsetY","pointerKeepAspect","pointer","createProgress","ProgressPath","isOverlap","progressWidth","count","progress","z2","diff","val","initProps","isNaN","setItemGraphicEl","isClip","seriesIndex","dataType","update","newIdx","oldIdx","previousPointer","getItemGraphicEl","previousRotate","updateProps","previousProgress","previousEndAngle","execute","emphasisModel","focus","blurScope","emphasisDisabled","symbolStyle","getItemVisual","visualColor","pathStyle","useStyle","image","setColor","getItemStyle","z2EmphasisLift","anchorModel","showAnchor","anchorSize","anchorType","offsetCenter","anchorKeepAspect","anchor","contentGroup","Group","newTitleEls","newDetailEls","hasAnimation","isAnimationEnabled","showPointerAbove","_titleEls","_detailEls","itemGroup","itemTitleModel","titleOffsetCenter","titleX","titleY","labelEl","attr","getName","itemDetailModel","detailOffsetCenter","detailX","detailY","detailColor","formatter_1","normal","getFormattedLabel","labelDataIndex","status","labelDimIndex","fmt","extendParams","interpolatedValue"],"sources":["/Users/billionare/Documents/eshakids/eshaKids/node_modules/echarts/lib/chart/gauge/GaugeView.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport PointerPath from './PointerPath.js';\nimport * as graphic from '../../util/graphic.js';\nimport { setStatesStylesFromModel, toggleHoverEmphasis } from '../../util/states.js';\nimport { createTextStyle, setLabelValueAnimation, animateLabelValue } from '../../label/labelStyle.js';\nimport ChartView from '../../view/Chart.js';\nimport { parsePercent, round, linearMap } from '../../util/number.js';\nimport Sausage from '../../util/shape/sausage.js';\nimport { createSymbol } from '../../util/symbol.js';\nimport ZRImage from 'zrender/lib/graphic/Image.js';\nimport { extend, isFunction, isString, isNumber, each } from 'zrender/lib/core/util.js';\nimport { setCommonECData } from '../../util/innerStore.js';\nimport { normalizeArcAngles } from 'zrender/lib/core/PathProxy.js';\n\nfunction parsePosition(seriesModel, api) {\n  var center = seriesModel.get('center');\n  var width = api.getWidth();\n  var height = api.getHeight();\n  var size = Math.min(width, height);\n  var cx = parsePercent(center[0], api.getWidth());\n  var cy = parsePercent(center[1], api.getHeight());\n  var r = parsePercent(seriesModel.get('radius'), size / 2);\n  return {\n    cx: cx,\n    cy: cy,\n    r: r\n  };\n}\n\nfunction formatLabel(value, labelFormatter) {\n  var label = value == null ? '' : value + '';\n\n  if (labelFormatter) {\n    if (isString(labelFormatter)) {\n      label = labelFormatter.replace('{value}', label);\n    } else if (isFunction(labelFormatter)) {\n      label = labelFormatter(value);\n    }\n  }\n\n  return label;\n}\n\nvar GaugeView =\n/** @class */\nfunction (_super) {\n  __extends(GaugeView, _super);\n\n  function GaugeView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = GaugeView.type;\n    return _this;\n  }\n\n  GaugeView.prototype.render = function (seriesModel, ecModel, api) {\n    this.group.removeAll();\n    var colorList = seriesModel.get(['axisLine', 'lineStyle', 'color']);\n    var posInfo = parsePosition(seriesModel, api);\n\n    this._renderMain(seriesModel, ecModel, api, colorList, posInfo);\n\n    this._data = seriesModel.getData();\n  };\n\n  GaugeView.prototype.dispose = function () {};\n\n  GaugeView.prototype._renderMain = function (seriesModel, ecModel, api, colorList, posInfo) {\n    var group = this.group;\n    var clockwise = seriesModel.get('clockwise');\n    var startAngle = -seriesModel.get('startAngle') / 180 * Math.PI;\n    var endAngle = -seriesModel.get('endAngle') / 180 * Math.PI;\n    var axisLineModel = seriesModel.getModel('axisLine');\n    var roundCap = axisLineModel.get('roundCap');\n    var MainPath = roundCap ? Sausage : graphic.Sector;\n    var showAxis = axisLineModel.get('show');\n    var lineStyleModel = axisLineModel.getModel('lineStyle');\n    var axisLineWidth = lineStyleModel.get('width');\n    var angles = [startAngle, endAngle];\n    normalizeArcAngles(angles, !clockwise);\n    startAngle = angles[0];\n    endAngle = angles[1];\n    var angleRangeSpan = endAngle - startAngle;\n    var prevEndAngle = startAngle;\n    var sectors = [];\n\n    for (var i = 0; showAxis && i < colorList.length; i++) {\n      // Clamp\n      var percent = Math.min(Math.max(colorList[i][0], 0), 1);\n      endAngle = startAngle + angleRangeSpan * percent;\n      var sector = new MainPath({\n        shape: {\n          startAngle: prevEndAngle,\n          endAngle: endAngle,\n          cx: posInfo.cx,\n          cy: posInfo.cy,\n          clockwise: clockwise,\n          r0: posInfo.r - axisLineWidth,\n          r: posInfo.r\n        },\n        silent: true\n      });\n      sector.setStyle({\n        fill: colorList[i][1]\n      });\n      sector.setStyle(lineStyleModel.getLineStyle( // Because we use sector to simulate arc\n      // so the properties for stroking are useless\n      ['color', 'width']));\n      sectors.push(sector);\n      prevEndAngle = endAngle;\n    }\n\n    sectors.reverse();\n    each(sectors, function (sector) {\n      return group.add(sector);\n    });\n\n    var getColor = function (percent) {\n      // Less than 0\n      if (percent <= 0) {\n        return colorList[0][1];\n      }\n\n      var i;\n\n      for (i = 0; i < colorList.length; i++) {\n        if (colorList[i][0] >= percent && (i === 0 ? 0 : colorList[i - 1][0]) < percent) {\n          return colorList[i][1];\n        }\n      } // More than 1\n\n\n      return colorList[i - 1][1];\n    };\n\n    this._renderTicks(seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise, axisLineWidth);\n\n    this._renderTitleAndDetail(seriesModel, ecModel, api, getColor, posInfo);\n\n    this._renderAnchor(seriesModel, posInfo);\n\n    this._renderPointer(seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise, axisLineWidth);\n  };\n\n  GaugeView.prototype._renderTicks = function (seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise, axisLineWidth) {\n    var group = this.group;\n    var cx = posInfo.cx;\n    var cy = posInfo.cy;\n    var r = posInfo.r;\n    var minVal = +seriesModel.get('min');\n    var maxVal = +seriesModel.get('max');\n    var splitLineModel = seriesModel.getModel('splitLine');\n    var tickModel = seriesModel.getModel('axisTick');\n    var labelModel = seriesModel.getModel('axisLabel');\n    var splitNumber = seriesModel.get('splitNumber');\n    var subSplitNumber = tickModel.get('splitNumber');\n    var splitLineLen = parsePercent(splitLineModel.get('length'), r);\n    var tickLen = parsePercent(tickModel.get('length'), r);\n    var angle = startAngle;\n    var step = (endAngle - startAngle) / splitNumber;\n    var subStep = step / subSplitNumber;\n    var splitLineStyle = splitLineModel.getModel('lineStyle').getLineStyle();\n    var tickLineStyle = tickModel.getModel('lineStyle').getLineStyle();\n    var splitLineDistance = splitLineModel.get('distance');\n    var unitX;\n    var unitY;\n\n    for (var i = 0; i <= splitNumber; i++) {\n      unitX = Math.cos(angle);\n      unitY = Math.sin(angle); // Split line\n\n      if (splitLineModel.get('show')) {\n        var distance = splitLineDistance ? splitLineDistance + axisLineWidth : axisLineWidth;\n        var splitLine = new graphic.Line({\n          shape: {\n            x1: unitX * (r - distance) + cx,\n            y1: unitY * (r - distance) + cy,\n            x2: unitX * (r - splitLineLen - distance) + cx,\n            y2: unitY * (r - splitLineLen - distance) + cy\n          },\n          style: splitLineStyle,\n          silent: true\n        });\n\n        if (splitLineStyle.stroke === 'auto') {\n          splitLine.setStyle({\n            stroke: getColor(i / splitNumber)\n          });\n        }\n\n        group.add(splitLine);\n      } // Label\n\n\n      if (labelModel.get('show')) {\n        var distance = labelModel.get('distance') + splitLineDistance;\n        var label = formatLabel(round(i / splitNumber * (maxVal - minVal) + minVal), labelModel.get('formatter'));\n        var autoColor = getColor(i / splitNumber);\n        var textStyleX = unitX * (r - splitLineLen - distance) + cx;\n        var textStyleY = unitY * (r - splitLineLen - distance) + cy;\n        var rotateType = labelModel.get('rotate');\n        var rotate = 0;\n\n        if (rotateType === 'radial') {\n          rotate = -angle + 2 * Math.PI;\n\n          if (rotate > Math.PI / 2) {\n            rotate += Math.PI;\n          }\n        } else if (rotateType === 'tangential') {\n          rotate = -angle - Math.PI / 2;\n        } else if (isNumber(rotateType)) {\n          rotate = rotateType * Math.PI / 180;\n        }\n\n        if (rotate === 0) {\n          group.add(new graphic.Text({\n            style: createTextStyle(labelModel, {\n              text: label,\n              x: textStyleX,\n              y: textStyleY,\n              verticalAlign: unitY < -0.8 ? 'top' : unitY > 0.8 ? 'bottom' : 'middle',\n              align: unitX < -0.4 ? 'left' : unitX > 0.4 ? 'right' : 'center'\n            }, {\n              inheritColor: autoColor\n            }),\n            silent: true\n          }));\n        } else {\n          group.add(new graphic.Text({\n            style: createTextStyle(labelModel, {\n              text: label,\n              x: textStyleX,\n              y: textStyleY,\n              verticalAlign: 'middle',\n              align: 'center'\n            }, {\n              inheritColor: autoColor\n            }),\n            silent: true,\n            originX: textStyleX,\n            originY: textStyleY,\n            rotation: rotate\n          }));\n        }\n      } // Axis tick\n\n\n      if (tickModel.get('show') && i !== splitNumber) {\n        var distance = tickModel.get('distance');\n        distance = distance ? distance + axisLineWidth : axisLineWidth;\n\n        for (var j = 0; j <= subSplitNumber; j++) {\n          unitX = Math.cos(angle);\n          unitY = Math.sin(angle);\n          var tickLine = new graphic.Line({\n            shape: {\n              x1: unitX * (r - distance) + cx,\n              y1: unitY * (r - distance) + cy,\n              x2: unitX * (r - tickLen - distance) + cx,\n              y2: unitY * (r - tickLen - distance) + cy\n            },\n            silent: true,\n            style: tickLineStyle\n          });\n\n          if (tickLineStyle.stroke === 'auto') {\n            tickLine.setStyle({\n              stroke: getColor((i + j / subSplitNumber) / splitNumber)\n            });\n          }\n\n          group.add(tickLine);\n          angle += subStep;\n        }\n\n        angle -= subStep;\n      } else {\n        angle += step;\n      }\n    }\n  };\n\n  GaugeView.prototype._renderPointer = function (seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise, axisLineWidth) {\n    var group = this.group;\n    var oldData = this._data;\n    var oldProgressData = this._progressEls;\n    var progressList = [];\n    var showPointer = seriesModel.get(['pointer', 'show']);\n    var progressModel = seriesModel.getModel('progress');\n    var showProgress = progressModel.get('show');\n    var data = seriesModel.getData();\n    var valueDim = data.mapDimension('value');\n    var minVal = +seriesModel.get('min');\n    var maxVal = +seriesModel.get('max');\n    var valueExtent = [minVal, maxVal];\n    var angleExtent = [startAngle, endAngle];\n\n    function createPointer(idx, angle) {\n      var itemModel = data.getItemModel(idx);\n      var pointerModel = itemModel.getModel('pointer');\n      var pointerWidth = parsePercent(pointerModel.get('width'), posInfo.r);\n      var pointerLength = parsePercent(pointerModel.get('length'), posInfo.r);\n      var pointerStr = seriesModel.get(['pointer', 'icon']);\n      var pointerOffset = pointerModel.get('offsetCenter');\n      var pointerOffsetX = parsePercent(pointerOffset[0], posInfo.r);\n      var pointerOffsetY = parsePercent(pointerOffset[1], posInfo.r);\n      var pointerKeepAspect = pointerModel.get('keepAspect');\n      var pointer; // not exist icon type will be set 'rect'\n\n      if (pointerStr) {\n        pointer = createSymbol(pointerStr, pointerOffsetX - pointerWidth / 2, pointerOffsetY - pointerLength, pointerWidth, pointerLength, null, pointerKeepAspect);\n      } else {\n        pointer = new PointerPath({\n          shape: {\n            angle: -Math.PI / 2,\n            width: pointerWidth,\n            r: pointerLength,\n            x: pointerOffsetX,\n            y: pointerOffsetY\n          }\n        });\n      }\n\n      pointer.rotation = -(angle + Math.PI / 2);\n      pointer.x = posInfo.cx;\n      pointer.y = posInfo.cy;\n      return pointer;\n    }\n\n    function createProgress(idx, endAngle) {\n      var roundCap = progressModel.get('roundCap');\n      var ProgressPath = roundCap ? Sausage : graphic.Sector;\n      var isOverlap = progressModel.get('overlap');\n      var progressWidth = isOverlap ? progressModel.get('width') : axisLineWidth / data.count();\n      var r0 = isOverlap ? posInfo.r - progressWidth : posInfo.r - (idx + 1) * progressWidth;\n      var r = isOverlap ? posInfo.r : posInfo.r - idx * progressWidth;\n      var progress = new ProgressPath({\n        shape: {\n          startAngle: startAngle,\n          endAngle: endAngle,\n          cx: posInfo.cx,\n          cy: posInfo.cy,\n          clockwise: clockwise,\n          r0: r0,\n          r: r\n        }\n      });\n      isOverlap && (progress.z2 = maxVal - data.get(valueDim, idx) % maxVal);\n      return progress;\n    }\n\n    if (showProgress || showPointer) {\n      data.diff(oldData).add(function (idx) {\n        var val = data.get(valueDim, idx);\n\n        if (showPointer) {\n          var pointer = createPointer(idx, startAngle); // TODO hide pointer on NaN value?\n\n          graphic.initProps(pointer, {\n            rotation: -((isNaN(+val) ? angleExtent[0] : linearMap(val, valueExtent, angleExtent, true)) + Math.PI / 2)\n          }, seriesModel);\n          group.add(pointer);\n          data.setItemGraphicEl(idx, pointer);\n        }\n\n        if (showProgress) {\n          var progress = createProgress(idx, startAngle);\n          var isClip = progressModel.get('clip');\n          graphic.initProps(progress, {\n            shape: {\n              endAngle: linearMap(val, valueExtent, angleExtent, isClip)\n            }\n          }, seriesModel);\n          group.add(progress); // Add data index and series index for indexing the data by element\n          // Useful in tooltip\n\n          setCommonECData(seriesModel.seriesIndex, data.dataType, idx, progress);\n          progressList[idx] = progress;\n        }\n      }).update(function (newIdx, oldIdx) {\n        var val = data.get(valueDim, newIdx);\n\n        if (showPointer) {\n          var previousPointer = oldData.getItemGraphicEl(oldIdx);\n          var previousRotate = previousPointer ? previousPointer.rotation : startAngle;\n          var pointer = createPointer(newIdx, previousRotate);\n          pointer.rotation = previousRotate;\n          graphic.updateProps(pointer, {\n            rotation: -((isNaN(+val) ? angleExtent[0] : linearMap(val, valueExtent, angleExtent, true)) + Math.PI / 2)\n          }, seriesModel);\n          group.add(pointer);\n          data.setItemGraphicEl(newIdx, pointer);\n        }\n\n        if (showProgress) {\n          var previousProgress = oldProgressData[oldIdx];\n          var previousEndAngle = previousProgress ? previousProgress.shape.endAngle : startAngle;\n          var progress = createProgress(newIdx, previousEndAngle);\n          var isClip = progressModel.get('clip');\n          graphic.updateProps(progress, {\n            shape: {\n              endAngle: linearMap(val, valueExtent, angleExtent, isClip)\n            }\n          }, seriesModel);\n          group.add(progress); // Add data index and series index for indexing the data by element\n          // Useful in tooltip\n\n          setCommonECData(seriesModel.seriesIndex, data.dataType, newIdx, progress);\n          progressList[newIdx] = progress;\n        }\n      }).execute();\n      data.each(function (idx) {\n        var itemModel = data.getItemModel(idx);\n        var emphasisModel = itemModel.getModel('emphasis');\n        var focus = emphasisModel.get('focus');\n        var blurScope = emphasisModel.get('blurScope');\n        var emphasisDisabled = emphasisModel.get('disabled');\n\n        if (showPointer) {\n          var pointer = data.getItemGraphicEl(idx);\n          var symbolStyle = data.getItemVisual(idx, 'style');\n          var visualColor = symbolStyle.fill;\n\n          if (pointer instanceof ZRImage) {\n            var pathStyle = pointer.style;\n            pointer.useStyle(extend({\n              image: pathStyle.image,\n              x: pathStyle.x,\n              y: pathStyle.y,\n              width: pathStyle.width,\n              height: pathStyle.height\n            }, symbolStyle));\n          } else {\n            pointer.useStyle(symbolStyle);\n            pointer.type !== 'pointer' && pointer.setColor(visualColor);\n          }\n\n          pointer.setStyle(itemModel.getModel(['pointer', 'itemStyle']).getItemStyle());\n\n          if (pointer.style.fill === 'auto') {\n            pointer.setStyle('fill', getColor(linearMap(data.get(valueDim, idx), valueExtent, [0, 1], true)));\n          }\n\n          pointer.z2EmphasisLift = 0;\n          setStatesStylesFromModel(pointer, itemModel);\n          toggleHoverEmphasis(pointer, focus, blurScope, emphasisDisabled);\n        }\n\n        if (showProgress) {\n          var progress = progressList[idx];\n          progress.useStyle(data.getItemVisual(idx, 'style'));\n          progress.setStyle(itemModel.getModel(['progress', 'itemStyle']).getItemStyle());\n          progress.z2EmphasisLift = 0;\n          setStatesStylesFromModel(progress, itemModel);\n          toggleHoverEmphasis(progress, focus, blurScope, emphasisDisabled);\n        }\n      });\n      this._progressEls = progressList;\n    }\n  };\n\n  GaugeView.prototype._renderAnchor = function (seriesModel, posInfo) {\n    var anchorModel = seriesModel.getModel('anchor');\n    var showAnchor = anchorModel.get('show');\n\n    if (showAnchor) {\n      var anchorSize = anchorModel.get('size');\n      var anchorType = anchorModel.get('icon');\n      var offsetCenter = anchorModel.get('offsetCenter');\n      var anchorKeepAspect = anchorModel.get('keepAspect');\n      var anchor = createSymbol(anchorType, posInfo.cx - anchorSize / 2 + parsePercent(offsetCenter[0], posInfo.r), posInfo.cy - anchorSize / 2 + parsePercent(offsetCenter[1], posInfo.r), anchorSize, anchorSize, null, anchorKeepAspect);\n      anchor.z2 = anchorModel.get('showAbove') ? 1 : 0;\n      anchor.setStyle(anchorModel.getModel('itemStyle').getItemStyle());\n      this.group.add(anchor);\n    }\n  };\n\n  GaugeView.prototype._renderTitleAndDetail = function (seriesModel, ecModel, api, getColor, posInfo) {\n    var _this = this;\n\n    var data = seriesModel.getData();\n    var valueDim = data.mapDimension('value');\n    var minVal = +seriesModel.get('min');\n    var maxVal = +seriesModel.get('max');\n    var contentGroup = new graphic.Group();\n    var newTitleEls = [];\n    var newDetailEls = [];\n    var hasAnimation = seriesModel.isAnimationEnabled();\n    var showPointerAbove = seriesModel.get(['pointer', 'showAbove']);\n    data.diff(this._data).add(function (idx) {\n      newTitleEls[idx] = new graphic.Text({\n        silent: true\n      });\n      newDetailEls[idx] = new graphic.Text({\n        silent: true\n      });\n    }).update(function (idx, oldIdx) {\n      newTitleEls[idx] = _this._titleEls[oldIdx];\n      newDetailEls[idx] = _this._detailEls[oldIdx];\n    }).execute();\n    data.each(function (idx) {\n      var itemModel = data.getItemModel(idx);\n      var value = data.get(valueDim, idx);\n      var itemGroup = new graphic.Group();\n      var autoColor = getColor(linearMap(value, [minVal, maxVal], [0, 1], true));\n      var itemTitleModel = itemModel.getModel('title');\n\n      if (itemTitleModel.get('show')) {\n        var titleOffsetCenter = itemTitleModel.get('offsetCenter');\n        var titleX = posInfo.cx + parsePercent(titleOffsetCenter[0], posInfo.r);\n        var titleY = posInfo.cy + parsePercent(titleOffsetCenter[1], posInfo.r);\n        var labelEl = newTitleEls[idx];\n        labelEl.attr({\n          z2: showPointerAbove ? 0 : 2,\n          style: createTextStyle(itemTitleModel, {\n            x: titleX,\n            y: titleY,\n            text: data.getName(idx),\n            align: 'center',\n            verticalAlign: 'middle'\n          }, {\n            inheritColor: autoColor\n          })\n        });\n        itemGroup.add(labelEl);\n      }\n\n      var itemDetailModel = itemModel.getModel('detail');\n\n      if (itemDetailModel.get('show')) {\n        var detailOffsetCenter = itemDetailModel.get('offsetCenter');\n        var detailX = posInfo.cx + parsePercent(detailOffsetCenter[0], posInfo.r);\n        var detailY = posInfo.cy + parsePercent(detailOffsetCenter[1], posInfo.r);\n        var width = parsePercent(itemDetailModel.get('width'), posInfo.r);\n        var height = parsePercent(itemDetailModel.get('height'), posInfo.r);\n        var detailColor = seriesModel.get(['progress', 'show']) ? data.getItemVisual(idx, 'style').fill : autoColor;\n        var labelEl = newDetailEls[idx];\n        var formatter_1 = itemDetailModel.get('formatter');\n        labelEl.attr({\n          z2: showPointerAbove ? 0 : 2,\n          style: createTextStyle(itemDetailModel, {\n            x: detailX,\n            y: detailY,\n            text: formatLabel(value, formatter_1),\n            width: isNaN(width) ? null : width,\n            height: isNaN(height) ? null : height,\n            align: 'center',\n            verticalAlign: 'middle'\n          }, {\n            inheritColor: detailColor\n          })\n        });\n        setLabelValueAnimation(labelEl, {\n          normal: itemDetailModel\n        }, value, function (value) {\n          return formatLabel(value, formatter_1);\n        });\n        hasAnimation && animateLabelValue(labelEl, idx, data, seriesModel, {\n          getFormattedLabel: function (labelDataIndex, status, dataType, labelDimIndex, fmt, extendParams) {\n            return formatLabel(extendParams ? extendParams.interpolatedValue : value, formatter_1);\n          }\n        });\n        itemGroup.add(labelEl);\n      }\n\n      contentGroup.add(itemGroup);\n    });\n    this.group.add(contentGroup);\n    this._titleEls = newTitleEls;\n    this._detailEls = newDetailEls;\n  };\n\n  GaugeView.type = 'gauge';\n  return GaugeView;\n}(ChartView);\n\nexport default GaugeView;"],"mappings":"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"},"metadata":{},"sourceType":"module"}