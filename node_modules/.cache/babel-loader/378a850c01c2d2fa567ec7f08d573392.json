{"ast":null,"code":"import { MixedType } from './MixedType';\n\nfunction toNumber(value) {\n  return +value;\n}\n\nexport class NumberType extends MixedType {\n  constructor(errorMessage) {\n    super('number');\n    super.pushRule({\n      onValid: value => /^-?(?:\\d+|\\d{1,3}(?:,\\d{3})+)(?:\\.\\d+)?$/.test(value + ''),\n      errorMessage: errorMessage || this.locale.type\n    });\n  }\n\n  isInteger() {\n    let errorMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.locale.isInteger;\n    super.pushRule({\n      onValid: value => /^-?\\d+$/.test(value + ''),\n      errorMessage\n    });\n    return this;\n  }\n\n  pattern(regexp) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.pattern;\n    super.pushRule({\n      onValid: value => regexp.test(value + ''),\n      errorMessage,\n      params: {\n        regexp\n      }\n    });\n    return this;\n  }\n\n  isOneOf(values) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.isOneOf;\n    super.pushRule({\n      onValid: value => values.includes(toNumber(value)),\n      errorMessage,\n      params: {\n        values\n      }\n    });\n    return this;\n  }\n\n  range(min, max) {\n    let errorMessage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.locale.range;\n    super.pushRule({\n      onValid: value => toNumber(value) >= min && toNumber(value) <= max,\n      errorMessage,\n      params: {\n        min,\n        max\n      }\n    });\n    return this;\n  }\n\n  min(min) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.min;\n    super.pushRule({\n      onValid: value => toNumber(value) >= min,\n      errorMessage,\n      params: {\n        min\n      }\n    });\n    return this;\n  }\n\n  max(max) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.max;\n    super.pushRule({\n      onValid: value => toNumber(value) <= max,\n      errorMessage,\n      params: {\n        max\n      }\n    });\n    return this;\n  }\n\n}\nexport default function getNumberType(errorMessage) {\n  return new NumberType(errorMessage);\n}","map":{"version":3,"sources":["../src/NumberType.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,QAA0B,aAA1B;;AAIA,SAAS,QAAT,CAAkB,KAAlB,EAAwC;EACtC,OAAO,CAAC,KAAR;AACD;;AAED,OAAM,MAAO,UAAP,SAAgE,SAAhE,CAKL;EACC,WAAA,CAAY,YAAZ,EAAqC;IACnC,MAAM,QAAN;IACA,MAAM,QAAN,CAAe;MACb,OAAO,EAAE,KAAK,IAAI,2CAA2C,IAA3C,CAAgD,KAAK,GAAG,EAAxD,CADL;MAEb,YAAY,EAAE,YAAY,IAAI,KAAK,MAAL,CAAY;IAF7B,CAAf;EAID;;EAED,SAAS,GAAiD;IAAA,IAAhD,YAAgD,uEAArB,KAAK,MAAL,CAAY,SAAS;IACxD,MAAM,QAAN,CAAe;MACb,OAAO,EAAE,KAAK,IAAI,UAAU,IAAV,CAAe,KAAK,GAAG,EAAvB,CADL;MAEb;IAFa,CAAf;IAKA,OAAO,IAAP;EACD;;EAED,OAAO,CAAC,MAAD,EAA+D;IAAA,IAA9C,YAA8C,uEAAnB,KAAK,MAAL,CAAY,OAAO;IACpE,MAAM,QAAN,CAAe;MACb,OAAO,EAAE,KAAK,IAAI,MAAM,CAAC,IAAP,CAAY,KAAK,GAAG,EAApB,CADL;MAEb,YAFa;MAGb,MAAM,EAAE;QAAE;MAAF;IAHK,CAAf;IAKA,OAAO,IAAP;EACD;;EAED,OAAO,CAAC,MAAD,EAAiE;IAAA,IAA9C,YAA8C,uEAAnB,KAAK,MAAL,CAAY,OAAO;IACtE,MAAM,QAAN,CAAe;MACb,OAAO,EAAE,KAAK,IAAI,MAAM,CAAC,QAAP,CAAgB,QAAQ,CAAC,KAAD,CAAxB,CADL;MAEb,YAFa;MAGb,MAAM,EAAE;QAAE;MAAF;IAHK,CAAf;IAKA,OAAO,IAAP;EACD;;EAED,KAAK,CAAC,GAAD,EAAc,GAAd,EAAuE;IAAA,IAA5C,YAA4C,uEAAjB,KAAK,MAAL,CAAY,KAAK;IAC1E,MAAM,QAAN,CAAe;MACb,OAAO,EAAE,KAAK,IAAI,QAAQ,CAAC,KAAD,CAAR,IAAmB,GAAnB,IAA0B,QAAQ,CAAC,KAAD,CAAR,IAAmB,GADlD;MAEb,YAFa;MAGb,MAAM,EAAE;QAAE,GAAF;QAAO;MAAP;IAHK,CAAf;IAKA,OAAO,IAAP;EACD;;EAED,GAAG,CAAC,GAAD,EAAwD;IAAA,IAA1C,YAA0C,uEAAf,KAAK,MAAL,CAAY,GAAG;IACzD,MAAM,QAAN,CAAe;MACb,OAAO,EAAE,KAAK,IAAI,QAAQ,CAAC,KAAD,CAAR,IAAmB,GADxB;MAEb,YAFa;MAGb,MAAM,EAAE;QAAE;MAAF;IAHK,CAAf;IAKA,OAAO,IAAP;EACD;;EAED,GAAG,CAAC,GAAD,EAAwD;IAAA,IAA1C,YAA0C,uEAAf,KAAK,MAAL,CAAY,GAAG;IACzD,MAAM,QAAN,CAAe;MACb,OAAO,EAAE,KAAK,IAAI,QAAQ,CAAC,KAAD,CAAR,IAAmB,GADxB;MAEb,YAFa;MAGb,MAAM,EAAE;QAAE;MAAF;IAHK,CAAf;IAKA,OAAO,IAAP;EACD;;AA7DF;AAgED,eAAc,SAAU,aAAV,CAAoD,YAApD,EAAoE;EAChF,OAAO,IAAI,UAAJ,CAA4B,YAA5B,CAAP;AACD","sourceRoot":"","sourcesContent":["import { MixedType } from './MixedType';\nfunction toNumber(value) {\n    return +value;\n}\nexport class NumberType extends MixedType {\n    constructor(errorMessage) {\n        super('number');\n        super.pushRule({\n            onValid: value => /^-?(?:\\d+|\\d{1,3}(?:,\\d{3})+)(?:\\.\\d+)?$/.test(value + ''),\n            errorMessage: errorMessage || this.locale.type\n        });\n    }\n    isInteger(errorMessage = this.locale.isInteger) {\n        super.pushRule({\n            onValid: value => /^-?\\d+$/.test(value + ''),\n            errorMessage\n        });\n        return this;\n    }\n    pattern(regexp, errorMessage = this.locale.pattern) {\n        super.pushRule({\n            onValid: value => regexp.test(value + ''),\n            errorMessage,\n            params: { regexp }\n        });\n        return this;\n    }\n    isOneOf(values, errorMessage = this.locale.isOneOf) {\n        super.pushRule({\n            onValid: value => values.includes(toNumber(value)),\n            errorMessage,\n            params: { values }\n        });\n        return this;\n    }\n    range(min, max, errorMessage = this.locale.range) {\n        super.pushRule({\n            onValid: value => toNumber(value) >= min && toNumber(value) <= max,\n            errorMessage,\n            params: { min, max }\n        });\n        return this;\n    }\n    min(min, errorMessage = this.locale.min) {\n        super.pushRule({\n            onValid: value => toNumber(value) >= min,\n            errorMessage,\n            params: { min }\n        });\n        return this;\n    }\n    max(max, errorMessage = this.locale.max) {\n        super.pushRule({\n            onValid: value => toNumber(value) <= max,\n            errorMessage,\n            params: { max }\n        });\n        return this;\n    }\n}\nexport default function getNumberType(errorMessage) {\n    return new NumberType(errorMessage);\n}\n//# sourceMappingURL=NumberType.js.map"]},"metadata":{},"sourceType":"module"}